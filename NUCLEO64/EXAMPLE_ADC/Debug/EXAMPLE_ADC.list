
EXAMPLE_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003110  08003110  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003118  08003118  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003118  08003118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000074  08003194  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003194  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005fc2  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000182d  00000000  00000000  000260a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005c8  00000000  00000000  000278d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000428  00000000  00000000  00027ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170f6  00000000  00000000  000282c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009232  00000000  00000000  0003f3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e2d1  00000000  00000000  000485f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019c0  00000000  00000000  000d68c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d8284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800305c 	.word	0x0800305c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800305c 	.word	0x0800305c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	463b      	mov	r3, r7
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_ADC1_Init+0x98>)
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <MX_ADC1_Init+0x9c>)
 80005a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_ADC1_Init+0x98>)
 80005a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_ADC1_Init+0x98>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_ADC1_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_ADC1_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_ADC1_Init+0x98>)
 80005ce:	4a17      	ldr	r2, [pc, #92]	; (800062c <MX_ADC1_Init+0xa0>)
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_ADC1_Init+0x98>)
 80005da:	2201      	movs	r2, #1
 80005dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_ADC1_Init+0x98>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <MX_ADC1_Init+0x98>)
 80005ee:	f000 fb79 	bl	8000ce4 <HAL_ADC_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f8:	f000 fa0c 	bl	8000a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005fc:	2310      	movs	r3, #16
 80005fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000600:	2301      	movs	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_ADC1_Init+0x98>)
 800060e:	f000 fd2d 	bl	800106c <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000618:	f000 f9fc 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000090 	.word	0x20000090
 8000628:	40012000 	.word	0x40012000
 800062c:	0f000001 	.word	0x0f000001

08000630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_ADC_MspInit+0x7c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d127      	bne.n	80006a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 800065c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000660:	6453      	str	r3, [r2, #68]	; 0x44
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800068a:	2303      	movs	r3, #3
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_ADC_MspInit+0x84>)
 800069e:	f001 f815 	bl	80016cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40012000 	.word	0x40012000
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b3c      	ldr	r3, [pc, #240]	; (80007c4 <MX_GPIO_Init+0x10c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a3b      	ldr	r2, [pc, #236]	; (80007c4 <MX_GPIO_Init+0x10c>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <MX_GPIO_Init+0x10c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <MX_GPIO_Init+0x10c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a34      	ldr	r2, [pc, #208]	; (80007c4 <MX_GPIO_Init+0x10c>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <MX_GPIO_Init+0x10c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <MX_GPIO_Init+0x10c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <MX_GPIO_Init+0x10c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <MX_GPIO_Init+0x10c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_GPIO_Init+0x10c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <MX_GPIO_Init+0x10c>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <MX_GPIO_Init+0x10c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4821      	ldr	r0, [pc, #132]	; (80007c8 <MX_GPIO_Init+0x110>)
 8000744:	f001 f946 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_ENA_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000748:	2200      	movs	r2, #0
 800074a:	f24f 0106 	movw	r1, #61446	; 0xf006
 800074e:	481f      	ldr	r0, [pc, #124]	; (80007cc <MX_GPIO_Init+0x114>)
 8000750:	f001 f940 	bl	80019d4 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_Pin;
 8000754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000760:	2301      	movs	r3, #1
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4819      	ldr	r0, [pc, #100]	; (80007d0 <MX_GPIO_Init+0x118>)
 800076c:	f000 ffae 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000770:	2320      	movs	r3, #32
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4810      	ldr	r0, [pc, #64]	; (80007c8 <MX_GPIO_Init+0x110>)
 8000788:	f000 ffa0 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_ENA_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 800078c:	f24f 0306 	movw	r3, #61446	; 0xf006
 8000790:	617b      	str	r3, [r7, #20]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <MX_GPIO_Init+0x114>)
 80007a6:	f000 ff91 	bl	80016cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2102      	movs	r1, #2
 80007ae:	2028      	movs	r0, #40	; 0x28
 80007b0:	f000 ff55 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b4:	2028      	movs	r0, #40	; 0x28
 80007b6:	f000 ff6e 	bl	8001696 <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40020800 	.word	0x40020800

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b5b0      	push	{r4, r5, r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 f9ed 	bl	8000bb8 <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD = LCD_Create(LCD_PORT, LCD_PIN, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_ENA_GPIO_Port, LCD_ENA_Pin);
 80007de:	4c25      	ldr	r4, [pc, #148]	; (8000874 <main+0xa0>)
 80007e0:	4638      	mov	r0, r7
 80007e2:	2302      	movs	r3, #2
 80007e4:	9302      	str	r3, [sp, #8]
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <main+0xa4>)
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	2304      	movs	r3, #4
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <main+0xa4>)
 80007f0:	4a22      	ldr	r2, [pc, #136]	; (800087c <main+0xa8>)
 80007f2:	4923      	ldr	r1, [pc, #140]	; (8000880 <main+0xac>)
 80007f4:	f001 fdd6 	bl	80023a4 <LCD_Create>
 80007f8:	4625      	mov	r5, r4
 80007fa:	463c      	mov	r4, r7
 80007fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000800:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000804:	e885 0003 	stmia.w	r5, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f844 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff ff54 	bl	80006b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000810:	f7ff febc 	bl	800058c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&LCD);
 8000814:	4817      	ldr	r0, [pc, #92]	; (8000874 <main+0xa0>)
 8000816:	f001 fde8 	bl	80023ea <LCD_Init>
  LCD_Command(&LCD, ClearDisplay);
 800081a:	2101      	movs	r1, #1
 800081c:	4815      	ldr	r0, [pc, #84]	; (8000874 <main+0xa0>)
 800081e:	f001 fe18 	bl	8002452 <LCD_Command>
  LCD_Command(&LCD, ReturnHome);
 8000822:	2102      	movs	r1, #2
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <main+0xa0>)
 8000826:	f001 fe14 	bl	8002452 <LCD_Command>
  LCD_Gotoxy(&LCD, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	4811      	ldr	r0, [pc, #68]	; (8000874 <main+0xa0>)
 8000830:	f001 ff40 	bl	80026b4 <LCD_Gotoxy>
  LCD_String(&LCD, "....STM32-F401RE....");
 8000834:	4913      	ldr	r1, [pc, #76]	; (8000884 <main+0xb0>)
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <main+0xa0>)
 8000838:	f001 ff1d 	bl	8002676 <LCD_String>
  LCD_Gotoxy(&LCD, 0, 1);
 800083c:	2201      	movs	r2, #1
 800083e:	2100      	movs	r1, #0
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <main+0xa0>)
 8000842:	f001 ff37 	bl	80026b4 <LCD_Gotoxy>
  LCD_String(&LCD, "    EXAMPLE ADC");
 8000846:	4910      	ldr	r1, [pc, #64]	; (8000888 <main+0xb4>)
 8000848:	480a      	ldr	r0, [pc, #40]	; (8000874 <main+0xa0>)
 800084a:	f001 ff14 	bl	8002676 <LCD_String>
  LCD_Gotoxy(&LCD, 0, 2);
 800084e:	2202      	movs	r2, #2
 8000850:	2100      	movs	r1, #0
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <main+0xa0>)
 8000854:	f001 ff2e 	bl	80026b4 <LCD_Gotoxy>
  LCD_String(&LCD, "  V1=xxxx  V2=xxxx");
 8000858:	490c      	ldr	r1, [pc, #48]	; (800088c <main+0xb8>)
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <main+0xa0>)
 800085c:	f001 ff0b 	bl	8002676 <LCD_String>
  LCD_Gotoxy(&LCD, 0, 3);
 8000860:	2203      	movs	r2, #3
 8000862:	2100      	movs	r1, #0
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <main+0xa0>)
 8000866:	f001 ff25 	bl	80026b4 <LCD_Gotoxy>
  LCD_String(&LCD, "  V3=xxxx  VT=xxxx");
 800086a:	4909      	ldr	r1, [pc, #36]	; (8000890 <main+0xbc>)
 800086c:	4801      	ldr	r0, [pc, #4]	; (8000874 <main+0xa0>)
 800086e:	f001 ff02 	bl	8002676 <LCD_String>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0x9e>
 8000874:	200000d8 	.word	0x200000d8
 8000878:	40020400 	.word	0x40020400
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	08003074 	.word	0x08003074
 8000888:	0800308c 	.word	0x0800308c
 800088c:	0800309c 	.word	0x0800309c
 8000890:	080030b0 	.word	0x080030b0

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 ff56 	bl	8002754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <SystemClock_Config+0xcc>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a27      	ldr	r2, [pc, #156]	; (8000960 <SystemClock_Config+0xcc>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b25      	ldr	r3, [pc, #148]	; (8000960 <SystemClock_Config+0xcc>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <SystemClock_Config+0xd0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e0:	4a20      	ldr	r2, [pc, #128]	; (8000964 <SystemClock_Config+0xd0>)
 80008e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800090c:	2354      	movs	r3, #84	; 0x54
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000914:	2307      	movs	r3, #7
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4618      	mov	r0, r3
 800091e:	f001 f8a5 	bl	8001a6c <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000928:	f000 f874 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2302      	movs	r3, #2
 8000932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2102      	movs	r1, #2
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fb07 	bl	8001f5c <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000954:	f000 f85e 	bl	8000a14 <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3750      	adds	r7, #80	; 0x50
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40007000 	.word	0x40007000

08000968 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	uint32_t channel_1, channel_2, channel_10, channel_temp;
	char string_value[10];

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000972:	2120      	movs	r1, #32
 8000974:	4824      	ldr	r0, [pc, #144]	; (8000a08 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000976:	f001 f846 	bl	8001a06 <HAL_GPIO_TogglePin>
	channel_1 = Read_Channel(ADC_CHANNEL_0);
 800097a:	2000      	movs	r0, #0
 800097c:	f001 fcda 	bl	8002334 <Read_Channel>
 8000980:	61f8      	str	r0, [r7, #28]
	channel_2 = Read_Channel(ADC_CHANNEL_1);
 8000982:	2001      	movs	r0, #1
 8000984:	f001 fcd6 	bl	8002334 <Read_Channel>
 8000988:	61b8      	str	r0, [r7, #24]
	channel_temp = Read_Channel(ADC_CHANNEL_TEMPSENSOR);
 800098a:	2010      	movs	r0, #16
 800098c:	f001 fcd2 	bl	8002334 <Read_Channel>
 8000990:	6178      	str	r0, [r7, #20]

	//Valor Canal1
	LCD_Gotoxy(&LCD, 5, 2);
 8000992:	2202      	movs	r2, #2
 8000994:	2105      	movs	r1, #5
 8000996:	481d      	ldr	r0, [pc, #116]	; (8000a0c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000998:	f001 fe8c 	bl	80026b4 <LCD_Gotoxy>
	sprintf(string_value, "%04ld", channel_1);
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	491b      	ldr	r1, [pc, #108]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xa8>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 feb5 	bl	8002714 <siprintf>
	LCD_String(&LCD, string_value);
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	4816      	ldr	r0, [pc, #88]	; (8000a0c <HAL_GPIO_EXTI_Callback+0xa4>)
 80009b2:	f001 fe60 	bl	8002676 <LCD_String>
	//Valor Canal2
	LCD_Gotoxy(&LCD, 14, 2);
 80009b6:	2202      	movs	r2, #2
 80009b8:	210e      	movs	r1, #14
 80009ba:	4814      	ldr	r0, [pc, #80]	; (8000a0c <HAL_GPIO_EXTI_Callback+0xa4>)
 80009bc:	f001 fe7a 	bl	80026b4 <LCD_Gotoxy>
	sprintf(string_value, "%04ld", channel_2);
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4912      	ldr	r1, [pc, #72]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xa8>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fea3 	bl	8002714 <siprintf>
	LCD_String(&LCD, string_value);
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4619      	mov	r1, r3
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <HAL_GPIO_EXTI_Callback+0xa4>)
 80009d6:	f001 fe4e 	bl	8002676 <LCD_String>
	//Valor Canal4
	LCD_Gotoxy(&LCD, 14, 3);
 80009da:	2203      	movs	r2, #3
 80009dc:	210e      	movs	r1, #14
 80009de:	480b      	ldr	r0, [pc, #44]	; (8000a0c <HAL_GPIO_EXTI_Callback+0xa4>)
 80009e0:	f001 fe68 	bl	80026b4 <LCD_Gotoxy>
	sprintf(string_value, "%04ld", channel_temp);
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	4909      	ldr	r1, [pc, #36]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xa8>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fe91 	bl	8002714 <siprintf>
	LCD_String(&LCD, string_value);
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <HAL_GPIO_EXTI_Callback+0xa4>)
 80009fa:	f001 fe3c 	bl	8002676 <LCD_String>

	return;
 80009fe:	bf00      	nop
}
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	200000d8 	.word	0x200000d8
 8000a10:	080030c4 	.word	0x080030c4

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f8ce 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_Pin);
 8000ac8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000acc:	f000 ffb6 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d207      	bcs.n	8000b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b04:	f001 fe2e 	bl	8002764 <__errno>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <_sbrk+0x64>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20018000 	.word	0x20018000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	200000f0 	.word	0x200000f0
 8000b3c:	20000240 	.word	0x20000240

08000b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b6a:	490e      	ldr	r1, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b80:	4c0b      	ldr	r4, [pc, #44]	; (8000bb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b8e:	f7ff ffd7 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f001 fded 	bl	8002770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fe1d 	bl	80007d4 <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ba8:	08003120 	.word	0x08003120
  ldr r2, =_sbss
 8000bac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bb0:	20000240 	.word	0x20000240

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <HAL_Init+0x40>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_Init+0x40>)
 8000bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x40>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 fd31 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff ff18 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fd49 	bl	80016b2 <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 fd11 	bl	800165e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000018 	.word	0x20000018
 8000c54:	20000020 	.word	0x20000020
 8000c58:	2000001c 	.word	0x2000001c

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000020 	.word	0x20000020
 8000c80:	200000f4 	.word	0x200000f4

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	200000f4 	.word	0x200000f4

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff ffee 	bl	8000c84 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffde 	bl	8000c84 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000020 	.word	0x20000020

08000ce4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e033      	b.n	8000d62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d109      	bne.n	8000d16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fc94 	bl	8000630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d118      	bne.n	8000d54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d2a:	f023 0302 	bic.w	r3, r3, #2
 8000d2e:	f043 0202 	orr.w	r2, r3, #2
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f000 faba 	bl	80012b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f023 0303 	bic.w	r3, r3, #3
 8000d4a:	f043 0201 	orr.w	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
 8000d52:	e001      	b.n	8000d58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <HAL_ADC_Start+0x1a>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e097      	b.n	8000eb6 <HAL_ADC_Start+0x14a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d018      	beq.n	8000dce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <HAL_ADC_Start+0x158>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a45      	ldr	r2, [pc, #276]	; (8000ec8 <HAL_ADC_Start+0x15c>)
 8000db2:	fba2 2303 	umull	r2, r3, r2, r3
 8000db6:	0c9a      	lsrs	r2, r3, #18
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000dc0:	e002      	b.n	8000dc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f9      	bne.n	8000dc2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d15f      	bne.n	8000e9c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000de4:	f023 0301 	bic.w	r3, r3, #1
 8000de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d007      	beq.n	8000e0e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e1a:	d106      	bne.n	8000e2a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e20:	f023 0206 	bic.w	r2, r3, #6
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	645a      	str	r2, [r3, #68]	; 0x44
 8000e28:	e002      	b.n	8000e30 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <HAL_ADC_Start+0x160>)
 8000e3a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e44:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10f      	bne.n	8000e72 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d129      	bne.n	8000eb4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	e020      	b.n	8000eb4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <HAL_ADC_Start+0x164>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d11b      	bne.n	8000eb4 <HAL_ADC_Start+0x148>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d114      	bne.n	8000eb4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	e00b      	b.n	8000eb4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f043 0210 	orr.w	r2, r3, #16
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f043 0201 	orr.w	r2, r3, #1
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000018 	.word	0x20000018
 8000ec8:	431bde83 	.word	0x431bde83
 8000ecc:	40012300 	.word	0x40012300
 8000ed0:	40012000 	.word	0x40012000

08000ed4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d101      	bne.n	8000eea <HAL_ADC_Stop+0x16>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e021      	b.n	8000f2e <HAL_ADC_Stop+0x5a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f56:	d113      	bne.n	8000f80 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f66:	d10b      	bne.n	8000f80 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f043 0220 	orr.w	r2, r3, #32
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e063      	b.n	8001048 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000f80:	f7ff fe80 	bl	8000c84 <HAL_GetTick>
 8000f84:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f86:	e021      	b.n	8000fcc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8e:	d01d      	beq.n	8000fcc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <HAL_ADC_PollForConversion+0x6c>
 8000f96:	f7ff fe75 	bl	8000c84 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d212      	bcs.n	8000fcc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d00b      	beq.n	8000fcc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f043 0204 	orr.w	r2, r3, #4
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e03d      	b.n	8001048 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d1d6      	bne.n	8000f88 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f06f 0212 	mvn.w	r2, #18
 8000fe2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d123      	bne.n	8001046 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001002:	2b00      	cmp	r3, #0
 8001004:	d11f      	bne.n	8001046 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800101e:	2b00      	cmp	r3, #0
 8001020:	d111      	bne.n	8001046 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d105      	bne.n	8001046 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_ADC_ConfigChannel+0x1c>
 8001084:	2302      	movs	r3, #2
 8001086:	e105      	b.n	8001294 <HAL_ADC_ConfigChannel+0x228>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b09      	cmp	r3, #9
 8001096:	d925      	bls.n	80010e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68d9      	ldr	r1, [r3, #12]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	3b1e      	subs	r3, #30
 80010ae:	2207      	movs	r2, #7
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43da      	mvns	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	400a      	ands	r2, r1
 80010bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68d9      	ldr	r1, [r3, #12]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4403      	add	r3, r0
 80010d6:	3b1e      	subs	r3, #30
 80010d8:	409a      	lsls	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	e022      	b.n	800112a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6919      	ldr	r1, [r3, #16]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	2207      	movs	r2, #7
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	400a      	ands	r2, r1
 8001106:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6919      	ldr	r1, [r3, #16]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	4603      	mov	r3, r0
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4403      	add	r3, r0
 8001120:	409a      	lsls	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b06      	cmp	r3, #6
 8001130:	d824      	bhi.n	800117c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	3b05      	subs	r3, #5
 8001144:	221f      	movs	r2, #31
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	400a      	ands	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b05      	subs	r3, #5
 800116e:	fa00 f203 	lsl.w	r2, r0, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
 800117a:	e04c      	b.n	8001216 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b0c      	cmp	r3, #12
 8001182:	d824      	bhi.n	80011ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	3b23      	subs	r3, #35	; 0x23
 8001196:	221f      	movs	r2, #31
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b23      	subs	r3, #35	; 0x23
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	631a      	str	r2, [r3, #48]	; 0x30
 80011cc:	e023      	b.n	8001216 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	3b41      	subs	r3, #65	; 0x41
 80011e0:	221f      	movs	r2, #31
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	400a      	ands	r2, r1
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	3b41      	subs	r3, #65	; 0x41
 800120a:	fa00 f203 	lsl.w	r2, r0, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_ADC_ConfigChannel+0x234>)
 8001218:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <HAL_ADC_ConfigChannel+0x238>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d109      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x1cc>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b12      	cmp	r3, #18
 800122a:	d105      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_ADC_ConfigChannel+0x238>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d123      	bne.n	800128a <HAL_ADC_ConfigChannel+0x21e>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d003      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x1e6>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b11      	cmp	r3, #17
 8001250:	d11b      	bne.n	800128a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b10      	cmp	r3, #16
 8001264:	d111      	bne.n	800128a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_ADC_ConfigChannel+0x23c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_ADC_ConfigChannel+0x240>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	0c9a      	lsrs	r2, r3, #18
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800127c:	e002      	b.n	8001284 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3b01      	subs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40012300 	.word	0x40012300
 80012a4:	40012000 	.word	0x40012000
 80012a8:	20000018 	.word	0x20000018
 80012ac:	431bde83 	.word	0x431bde83

080012b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012b8:	4b79      	ldr	r3, [pc, #484]	; (80014a0 <ADC_Init+0x1f0>)
 80012ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	021a      	lsls	r2, r3, #8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001308:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800132a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6899      	ldr	r1, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <ADC_Init+0x1f4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d022      	beq.n	800138e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001356:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6899      	ldr	r1, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6899      	ldr	r1, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	e00f      	b.n	80013ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800139c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0202 	bic.w	r2, r2, #2
 80013bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6899      	ldr	r1, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7e1b      	ldrb	r3, [r3, #24]
 80013c8:	005a      	lsls	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01b      	beq.n	8001414 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6859      	ldr	r1, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	3b01      	subs	r3, #1
 8001408:	035a      	lsls	r2, r3, #13
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	e007      	b.n	8001424 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001422:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	3b01      	subs	r3, #1
 8001440:	051a      	lsls	r2, r3, #20
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6899      	ldr	r1, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001466:	025a      	lsls	r2, r3, #9
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800147e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6899      	ldr	r1, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	029a      	lsls	r2, r3, #10
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	609a      	str	r2, [r3, #8]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40012300 	.word	0x40012300
 80014a4:	0f000001 	.word	0x0f000001

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff29 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff3e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff31 	bl	800150c <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e159      	b.n	800199c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8148 	bne.w	8001996 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d005      	beq.n	800171e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	2b02      	cmp	r3, #2
 800171c:	d130      	bne.n	8001780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 0201 	and.w	r2, r3, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b03      	cmp	r3, #3
 800178a:	d017      	beq.n	80017bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d123      	bne.n	8001810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	69b9      	ldr	r1, [r7, #24]
 800180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a2 	beq.w	8001996 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <HAL_GPIO_Init+0x2e8>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a56      	ldr	r2, [pc, #344]	; (80019b4 <HAL_GPIO_Init+0x2e8>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <HAL_GPIO_Init+0x2e8>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186e:	4a52      	ldr	r2, [pc, #328]	; (80019b8 <HAL_GPIO_Init+0x2ec>)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a49      	ldr	r2, [pc, #292]	; (80019bc <HAL_GPIO_Init+0x2f0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d019      	beq.n	80018ce <HAL_GPIO_Init+0x202>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a48      	ldr	r2, [pc, #288]	; (80019c0 <HAL_GPIO_Init+0x2f4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0x1fe>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a47      	ldr	r2, [pc, #284]	; (80019c4 <HAL_GPIO_Init+0x2f8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00d      	beq.n	80018c6 <HAL_GPIO_Init+0x1fa>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a46      	ldr	r2, [pc, #280]	; (80019c8 <HAL_GPIO_Init+0x2fc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_GPIO_Init+0x1f6>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a45      	ldr	r2, [pc, #276]	; (80019cc <HAL_GPIO_Init+0x300>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_GPIO_Init+0x1f2>
 80018ba:	2304      	movs	r3, #4
 80018bc:	e008      	b.n	80018d0 <HAL_GPIO_Init+0x204>
 80018be:	2307      	movs	r3, #7
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x204>
 80018c2:	2303      	movs	r3, #3
 80018c4:	e004      	b.n	80018d0 <HAL_GPIO_Init+0x204>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e002      	b.n	80018d0 <HAL_GPIO_Init+0x204>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_GPIO_Init+0x204>
 80018ce:	2300      	movs	r3, #0
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f002 0203 	and.w	r2, r2, #3
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	4093      	lsls	r3, r2
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e0:	4935      	ldr	r1, [pc, #212]	; (80019b8 <HAL_GPIO_Init+0x2ec>)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ee:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001912:	4a2f      	ldr	r2, [pc, #188]	; (80019d0 <HAL_GPIO_Init+0x304>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_GPIO_Init+0x304>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800193c:	4a24      	ldr	r2, [pc, #144]	; (80019d0 <HAL_GPIO_Init+0x304>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_GPIO_Init+0x304>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001966:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <HAL_GPIO_Init+0x304>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_GPIO_Init+0x304>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_GPIO_Init+0x304>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3301      	adds	r3, #1
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b0f      	cmp	r3, #15
 80019a0:	f67f aea2 	bls.w	80016e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40013800 	.word	0x40013800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020400 	.word	0x40020400
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f0:	e003      	b.n	80019fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	619a      	str	r2, [r3, #24]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a18:	887a      	ldrh	r2, [r7, #2]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	041a      	lsls	r2, r3, #16
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	400b      	ands	r3, r1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	619a      	str	r2, [r3, #24]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe ff84 	bl	8000968 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40013c00 	.word	0x40013c00

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e267      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d075      	beq.n	8001b76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a8a:	4b88      	ldr	r3, [pc, #544]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d00c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a96:	4b85      	ldr	r3, [pc, #532]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d112      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa2:	4b82      	ldr	r3, [pc, #520]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aae:	d10b      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	4b7e      	ldr	r3, [pc, #504]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d05b      	beq.n	8001b74 <HAL_RCC_OscConfig+0x108>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d157      	bne.n	8001b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e242      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d106      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x74>
 8001ad2:	4b76      	ldr	r3, [pc, #472]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a75      	ldr	r2, [pc, #468]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e01d      	b.n	8001b1c <HAL_RCC_OscConfig+0xb0>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x98>
 8001aea:	4b70      	ldr	r3, [pc, #448]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6f      	ldr	r2, [pc, #444]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b6d      	ldr	r3, [pc, #436]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6c      	ldr	r2, [pc, #432]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0xb0>
 8001b04:	4b69      	ldr	r3, [pc, #420]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a68      	ldr	r2, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b66      	ldr	r3, [pc, #408]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a65      	ldr	r2, [pc, #404]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff f8ae 	bl	8000c84 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f8aa 	bl	8000c84 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e207      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0xc0>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f89a 	bl	8000c84 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff f896 	bl	8000c84 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1f3      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	4b51      	ldr	r3, [pc, #324]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0xe8>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b82:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d11c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9a:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x152>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e1c7      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4937      	ldr	r1, [pc, #220]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	e03a      	b.n	8001c4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_RCC_OscConfig+0x244>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7ff f84f 	bl	8000c84 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff f84b 	bl	8000c84 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1a8      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4925      	ldr	r1, [pc, #148]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_RCC_OscConfig+0x244>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff f82e 	bl	8000c84 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff f82a 	bl	8000c84 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e187      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d036      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d016      	beq.n	8001c8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_RCC_OscConfig+0x248>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7ff f80e 	bl	8000c84 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f80a 	bl	8000c84 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e167      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_OscConfig+0x240>)
 8001c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x200>
 8001c8a:	e01b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCC_OscConfig+0x248>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c92:	f7fe fff7 	bl	8000c84 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	e00e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7fe fff3 	bl	8000c84 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d907      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e150      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	42470000 	.word	0x42470000
 8001cb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	4b88      	ldr	r3, [pc, #544]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ea      	bne.n	8001c9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8097 	beq.w	8001e00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4b81      	ldr	r3, [pc, #516]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10f      	bne.n	8001d02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b7d      	ldr	r3, [pc, #500]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a7c      	ldr	r2, [pc, #496]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b7a      	ldr	r3, [pc, #488]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b77      	ldr	r3, [pc, #476]	; (8001ee0 <HAL_RCC_OscConfig+0x474>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b74      	ldr	r3, [pc, #464]	; (8001ee0 <HAL_RCC_OscConfig+0x474>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a73      	ldr	r2, [pc, #460]	; (8001ee0 <HAL_RCC_OscConfig+0x474>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe ffb3 	bl	8000c84 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7fe ffaf 	bl	8000c84 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e10c      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b6a      	ldr	r3, [pc, #424]	; (8001ee0 <HAL_RCC_OscConfig+0x474>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2ea>
 8001d48:	4b64      	ldr	r3, [pc, #400]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a63      	ldr	r2, [pc, #396]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
 8001d54:	e01c      	b.n	8001d90 <HAL_RCC_OscConfig+0x324>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x30c>
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	4a5e      	ldr	r2, [pc, #376]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	4a5b      	ldr	r2, [pc, #364]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6713      	str	r3, [r2, #112]	; 0x70
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0x324>
 8001d78:	4b58      	ldr	r3, [pc, #352]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a57      	ldr	r2, [pc, #348]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	4b55      	ldr	r3, [pc, #340]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a54      	ldr	r2, [pc, #336]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001d8a:	f023 0304 	bic.w	r3, r3, #4
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d015      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7fe ff74 	bl	8000c84 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7fe ff70 	bl	8000c84 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e0cb      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db6:	4b49      	ldr	r3, [pc, #292]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ee      	beq.n	8001da0 <HAL_RCC_OscConfig+0x334>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7fe ff5e 	bl	8000c84 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7fe ff5a 	bl	8000c84 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e0b5      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ee      	bne.n	8001dcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df4:	4b39      	ldr	r3, [pc, #228]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	4a38      	ldr	r2, [pc, #224]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80a1 	beq.w	8001f4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e0a:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d05c      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d141      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7fe ff2e 	bl	8000c84 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe ff2a 	bl	8000c84 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e087      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69da      	ldr	r2, [r3, #28]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	019b      	lsls	r3, r3, #6
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	3b01      	subs	r3, #1
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	061b      	lsls	r3, r3, #24
 8001e6e:	491b      	ldr	r1, [pc, #108]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7fe ff03 	bl	8000c84 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e82:	f7fe feff 	bl	8000c84 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e05c      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x416>
 8001ea0:	e054      	b.n	8001f4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_RCC_OscConfig+0x478>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7fe feec 	bl	8000c84 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7fe fee8 	bl	8000c84 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e045      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_OscConfig+0x470>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x444>
 8001ece:	e03d      	b.n	8001f4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e038      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_RCC_OscConfig+0x4ec>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d028      	beq.n	8001f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d121      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d11a      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f18:	4013      	ands	r3, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d111      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	085b      	lsrs	r3, r3, #1
 8001f30:	3b01      	subs	r3, #1
 8001f32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800

08001f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0cc      	b.n	800210a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f70:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_ClockConfig+0x1b8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d90c      	bls.n	8001f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b65      	ldr	r3, [pc, #404]	; (8002114 <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b63      	ldr	r3, [pc, #396]	; (8002114 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0b8      	b.n	800210a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d020      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb0:	4b59      	ldr	r3, [pc, #356]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4a58      	ldr	r2, [pc, #352]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc8:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a52      	ldr	r2, [pc, #328]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd4:	4b50      	ldr	r3, [pc, #320]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	494d      	ldr	r1, [pc, #308]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d044      	beq.n	800207c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d119      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e07f      	b.n	800210a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d003      	beq.n	800201a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002016:	2b03      	cmp	r3, #3
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e06f      	b.n	800210a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e067      	b.n	800210a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203a:	4b37      	ldr	r3, [pc, #220]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f023 0203 	bic.w	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4934      	ldr	r1, [pc, #208]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800204c:	f7fe fe1a 	bl	8000c84 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	e00a      	b.n	800206a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7fe fe16 	bl	8000c84 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e04f      	b.n	800210a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 020c 	and.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	429a      	cmp	r2, r3
 800207a:	d1eb      	bne.n	8002054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_RCC_ClockConfig+0x1b8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d20c      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_RCC_ClockConfig+0x1b8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e032      	b.n	800210a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4916      	ldr	r1, [pc, #88]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	490e      	ldr	r1, [pc, #56]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020e2:	f000 f821 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 80020e6:	4602      	mov	r2, r0
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	490a      	ldr	r1, [pc, #40]	; (800211c <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	5ccb      	ldrb	r3, [r1, r3]
 80020f6:	fa22 f303 	lsr.w	r3, r2, r3
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x1c8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fd7a 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023c00 	.word	0x40023c00
 8002118:	40023800 	.word	0x40023800
 800211c:	080030cc 	.word	0x080030cc
 8002120:	20000018 	.word	0x20000018
 8002124:	2000001c 	.word	0x2000001c

08002128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800212c:	b094      	sub	sp, #80	; 0x50
 800212e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	647b      	str	r3, [r7, #68]	; 0x44
 8002134:	2300      	movs	r3, #0
 8002136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002138:	2300      	movs	r3, #0
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002140:	4b79      	ldr	r3, [pc, #484]	; (8002328 <HAL_RCC_GetSysClockFreq+0x200>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d00d      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x40>
 800214c:	2b08      	cmp	r3, #8
 800214e:	f200 80e1 	bhi.w	8002314 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x34>
 8002156:	2b04      	cmp	r3, #4
 8002158:	d003      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0x3a>
 800215a:	e0db      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800215c:	4b73      	ldr	r3, [pc, #460]	; (800232c <HAL_RCC_GetSysClockFreq+0x204>)
 800215e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002160:	e0db      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002162:	4b73      	ldr	r3, [pc, #460]	; (8002330 <HAL_RCC_GetSysClockFreq+0x208>)
 8002164:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002166:	e0d8      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002168:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_GetSysClockFreq+0x200>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002170:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002172:	4b6d      	ldr	r3, [pc, #436]	; (8002328 <HAL_RCC_GetSysClockFreq+0x200>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d063      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217e:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <HAL_RCC_GetSysClockFreq+0x200>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	099b      	lsrs	r3, r3, #6
 8002184:	2200      	movs	r2, #0
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	63fa      	str	r2, [r7, #60]	; 0x3c
 800218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
 8002192:	2300      	movs	r3, #0
 8002194:	637b      	str	r3, [r7, #52]	; 0x34
 8002196:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800219a:	4622      	mov	r2, r4
 800219c:	462b      	mov	r3, r5
 800219e:	f04f 0000 	mov.w	r0, #0
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	0159      	lsls	r1, r3, #5
 80021a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ac:	0150      	lsls	r0, r2, #5
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4621      	mov	r1, r4
 80021b4:	1a51      	subs	r1, r2, r1
 80021b6:	6139      	str	r1, [r7, #16]
 80021b8:	4629      	mov	r1, r5
 80021ba:	eb63 0301 	sbc.w	r3, r3, r1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021cc:	4659      	mov	r1, fp
 80021ce:	018b      	lsls	r3, r1, #6
 80021d0:	4651      	mov	r1, sl
 80021d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021d6:	4651      	mov	r1, sl
 80021d8:	018a      	lsls	r2, r1, #6
 80021da:	4651      	mov	r1, sl
 80021dc:	ebb2 0801 	subs.w	r8, r2, r1
 80021e0:	4659      	mov	r1, fp
 80021e2:	eb63 0901 	sbc.w	r9, r3, r1
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021fa:	4690      	mov	r8, r2
 80021fc:	4699      	mov	r9, r3
 80021fe:	4623      	mov	r3, r4
 8002200:	eb18 0303 	adds.w	r3, r8, r3
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	462b      	mov	r3, r5
 8002208:	eb49 0303 	adc.w	r3, r9, r3
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800221a:	4629      	mov	r1, r5
 800221c:	024b      	lsls	r3, r1, #9
 800221e:	4621      	mov	r1, r4
 8002220:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002224:	4621      	mov	r1, r4
 8002226:	024a      	lsls	r2, r1, #9
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800222e:	2200      	movs	r2, #0
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
 8002232:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002234:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002238:	f7fe f82a 	bl	8000290 <__aeabi_uldivmod>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4613      	mov	r3, r2
 8002242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002244:	e058      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002246:	4b38      	ldr	r3, [pc, #224]	; (8002328 <HAL_RCC_GetSysClockFreq+0x200>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	099b      	lsrs	r3, r3, #6
 800224c:	2200      	movs	r2, #0
 800224e:	4618      	mov	r0, r3
 8002250:	4611      	mov	r1, r2
 8002252:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
 800225c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002260:	4642      	mov	r2, r8
 8002262:	464b      	mov	r3, r9
 8002264:	f04f 0000 	mov.w	r0, #0
 8002268:	f04f 0100 	mov.w	r1, #0
 800226c:	0159      	lsls	r1, r3, #5
 800226e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002272:	0150      	lsls	r0, r2, #5
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4641      	mov	r1, r8
 800227a:	ebb2 0a01 	subs.w	sl, r2, r1
 800227e:	4649      	mov	r1, r9
 8002280:	eb63 0b01 	sbc.w	fp, r3, r1
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002290:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002294:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002298:	ebb2 040a 	subs.w	r4, r2, sl
 800229c:	eb63 050b 	sbc.w	r5, r3, fp
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	00eb      	lsls	r3, r5, #3
 80022aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ae:	00e2      	lsls	r2, r4, #3
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	4643      	mov	r3, r8
 80022b6:	18e3      	adds	r3, r4, r3
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	464b      	mov	r3, r9
 80022bc:	eb45 0303 	adc.w	r3, r5, r3
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ce:	4629      	mov	r1, r5
 80022d0:	028b      	lsls	r3, r1, #10
 80022d2:	4621      	mov	r1, r4
 80022d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022d8:	4621      	mov	r1, r4
 80022da:	028a      	lsls	r2, r1, #10
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e2:	2200      	movs	r2, #0
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	61fa      	str	r2, [r7, #28]
 80022e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022ec:	f7fd ffd0 	bl	8000290 <__aeabi_uldivmod>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4613      	mov	r3, r2
 80022f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_GetSysClockFreq+0x200>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	3301      	adds	r3, #1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800230a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002312:	e002      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCC_GetSysClockFreq+0x204>)
 8002316:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800231c:	4618      	mov	r0, r3
 800231e:	3750      	adds	r7, #80	; 0x50
 8002320:	46bd      	mov	sp, r7
 8002322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	00f42400 	.word	0x00f42400
 8002330:	007a1200 	.word	0x007a1200

08002334 <Read_Channel>:
 */
#include "ADC_Library.h"

extern ADC_HandleTypeDef hadc1;

uint32_t Read_Channel(uint32_t channel){
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	uint32_t ChannelValue=0;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]

	ADC_ChannelConfTypeDef sConfig = {0};
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002356:	2302      	movs	r3, #2
 8002358:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	4619      	mov	r1, r3
 8002360:	480f      	ldr	r0, [pc, #60]	; (80023a0 <Read_Channel+0x6c>)
 8002362:	f7fe fe83 	bl	800106c <HAL_ADC_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <Read_Channel+0x3c>
		Error_Handler();
 800236c:	f7fe fb52 	bl	8000a14 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <Read_Channel+0x6c>)
 8002372:	f7fe fcfb 	bl	8000d6c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 8002376:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800237a:	4809      	ldr	r0, [pc, #36]	; (80023a0 <Read_Channel+0x6c>)
 800237c:	f7fe fddd 	bl	8000f3a <HAL_ADC_PollForConversion>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d103      	bne.n	800238e <Read_Channel+0x5a>
		ChannelValue = HAL_ADC_GetValue(&hadc1);
 8002386:	4806      	ldr	r0, [pc, #24]	; (80023a0 <Read_Channel+0x6c>)
 8002388:	f7fe fe62 	bl	8001050 <HAL_ADC_GetValue>
 800238c:	61f8      	str	r0, [r7, #28]
	}
	HAL_ADC_Stop(&hadc1);
 800238e:	4804      	ldr	r0, [pc, #16]	; (80023a0 <Read_Channel+0x6c>)
 8002390:	f7fe fda0 	bl	8000ed4 <HAL_ADC_Stop>

	return ChannelValue;
 8002394:	69fb      	ldr	r3, [r7, #28]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000090 	.word	0x20000090

080023a4 <LCD_Create>:
#include "LCD_Library.h"


LCD_Struct_t LCD_Create(LCD_PortType port[], LCD_PinType pin[],
		LCD_PortType portRS, LCD_PinType pinRS,
		LCD_PortType portENA, LCD_PinType pinENA){
 80023a4:	b4b0      	push	{r4, r5, r7}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]

	LCD_Struct_t LCD;

	LCD.dataport = port;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	613b      	str	r3, [r7, #16]
	LCD.datapin = pin;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	617b      	str	r3, [r7, #20]
	LCD.RS_port = portRS;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
	LCD.RS_pin = pinRS;
 80023be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80023c0:	83bb      	strh	r3, [r7, #28]
	LCD.ENA_port = portENA;
 80023c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c4:	623b      	str	r3, [r7, #32]
	LCD.ENA_pin = pinENA;
 80023c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023ca:	84bb      	strh	r3, [r7, #36]	; 0x24

	return LCD;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	461d      	mov	r5, r3
 80023d0:	f107 0410 	add.w	r4, r7, #16
 80023d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023dc:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	372c      	adds	r7, #44	; 0x2c
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bcb0      	pop	{r4, r5, r7}
 80023e8:	4770      	bx	lr

080023ea <LCD_Init>:


void LCD_Init(LCD_Struct_t *LCD){
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]

	HAL_Delay(20);
 80023f2:	2014      	movs	r0, #20
 80023f4:	f7fe fc52 	bl	8000c9c <HAL_Delay>
	LCD_Command(LCD, 0x30);
 80023f8:	2130      	movs	r1, #48	; 0x30
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f829 	bl	8002452 <LCD_Command>
	HAL_Delay(5);
 8002400:	2005      	movs	r0, #5
 8002402:	f7fe fc4b 	bl	8000c9c <HAL_Delay>
	LCD_Command(LCD, 0x30);
 8002406:	2130      	movs	r1, #48	; 0x30
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f822 	bl	8002452 <LCD_Command>
	HAL_Delay(1);
 800240e:	2001      	movs	r0, #1
 8002410:	f7fe fc44 	bl	8000c9c <HAL_Delay>
	LCD_Command(LCD, 0x30);
 8002414:	2130      	movs	r1, #48	; 0x30
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f81b 	bl	8002452 <LCD_Command>
	HAL_Delay(1);
 800241c:	2001      	movs	r0, #1
 800241e:	f7fe fc3d 	bl	8000c9c <HAL_Delay>

	LCD_Command(LCD, 0x32);
 8002422:	2132      	movs	r1, #50	; 0x32
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f814 	bl	8002452 <LCD_Command>
	LCD_Command(LCD, 0x28);
 800242a:	2128      	movs	r1, #40	; 0x28
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f810 	bl	8002452 <LCD_Command>
	LCD_Command(LCD, 0x0C);
 8002432:	210c      	movs	r1, #12
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f80c 	bl	8002452 <LCD_Command>
	LCD_Command(LCD, 0x01);
 800243a:	2101      	movs	r1, #1
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f808 	bl	8002452 <LCD_Command>
	LCD_Command(LCD, 0x06);
 8002442:	2106      	movs	r1, #6
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f804 	bl	8002452 <LCD_Command>

	return;
 800244a:	bf00      	nop
}
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <LCD_Command>:

void LCD_Command(LCD_Struct_t *LCD, uint8_t command){
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	73bb      	strb	r3, [r7, #14]
	uint8_t j;

	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6918      	ldr	r0, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	8a9b      	ldrh	r3, [r3, #20]
 800246a:	2200      	movs	r2, #0
 800246c:	4619      	mov	r1, r3
 800246e:	f7ff fab1 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->RS_port, LCD->RS_pin, RESET);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6898      	ldr	r0, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	899b      	ldrh	r3, [r3, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	4619      	mov	r1, r3
 800247e:	f7ff faa9 	bl	80019d4 <HAL_GPIO_WritePin>

	cmd = (command>>4)&0x0F;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	73bb      	strb	r3, [r7, #14]
	for(j=0; j<4; j++){
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e019      	b.n	80024c2 <LCD_Command+0x70>
		HAL_GPIO_WritePin(LCD->dataport[j], LCD->datapin[j], (cmd>>j)&0x01);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	8819      	ldrh	r1, [r3, #0]
 80024a6:	7bba      	ldrb	r2, [r7, #14]
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	fa42 f303 	asr.w	r3, r2, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	f7ff fa8c 	bl	80019d4 <HAL_GPIO_WritePin>
	for(j=0; j<4; j++){
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	3301      	adds	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d9e2      	bls.n	800248e <LCD_Command+0x3c>
	}
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, SET);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6918      	ldr	r0, [r3, #16]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8a9b      	ldrh	r3, [r3, #20]
 80024d0:	2201      	movs	r2, #1
 80024d2:	4619      	mov	r1, r3
 80024d4:	f7ff fa7e 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80024d8:	2001      	movs	r0, #1
 80024da:	f7fe fbdf 	bl	8000c9c <HAL_Delay>
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6918      	ldr	r0, [r3, #16]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	8a9b      	ldrh	r3, [r3, #20]
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7ff fa73 	bl	80019d4 <HAL_GPIO_WritePin>

	cmd = (command)&0x0F;
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	73bb      	strb	r3, [r7, #14]
	for(j=0; j<4; j++){
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e019      	b.n	8002530 <LCD_Command+0xde>
		HAL_GPIO_WritePin(LCD->dataport[j], LCD->datapin[j], (cmd>>j)&0x01);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	8819      	ldrh	r1, [r3, #0]
 8002514:	7bba      	ldrb	r2, [r7, #14]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	fa42 f303 	asr.w	r3, r2, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	f7ff fa55 	bl	80019d4 <HAL_GPIO_WritePin>
	for(j=0; j<4; j++){
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	3301      	adds	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d9e2      	bls.n	80024fc <LCD_Command+0xaa>
	}
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, SET);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6918      	ldr	r0, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8a9b      	ldrh	r3, [r3, #20]
 800253e:	2201      	movs	r2, #1
 8002540:	4619      	mov	r1, r3
 8002542:	f7ff fa47 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002546:	2001      	movs	r0, #1
 8002548:	f7fe fba8 	bl	8000c9c <HAL_Delay>
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6918      	ldr	r0, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8a9b      	ldrh	r3, [r3, #20]
 8002554:	2200      	movs	r2, #0
 8002556:	4619      	mov	r1, r3
 8002558:	f7ff fa3c 	bl	80019d4 <HAL_GPIO_WritePin>

	return;
 800255c:	bf00      	nop
}
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <LCD_Character>:
void LCD_Character(LCD_Struct_t *LCD, char data){
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
	uint8_t dat = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	73bb      	strb	r3, [r7, #14]
	uint8_t j;

	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6918      	ldr	r0, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8a9b      	ldrh	r3, [r3, #20]
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	f7ff fa28 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->RS_port, LCD->RS_pin, SET);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6898      	ldr	r0, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	899b      	ldrh	r3, [r3, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	4619      	mov	r1, r3
 8002590:	f7ff fa20 	bl	80019d4 <HAL_GPIO_WritePin>

	dat = (data>>4)&0x0F;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	73bb      	strb	r3, [r7, #14]
	for(j=0; j<4; j++){
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e019      	b.n	80025d4 <LCD_Character+0x70>
		HAL_GPIO_WritePin(LCD->dataport[j], LCD->datapin[j], (dat>>j)&0x01);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	8819      	ldrh	r1, [r3, #0]
 80025b8:	7bba      	ldrb	r2, [r7, #14]
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	fa42 f303 	asr.w	r3, r2, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	f7ff fa03 	bl	80019d4 <HAL_GPIO_WritePin>
	for(j=0; j<4; j++){
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	3301      	adds	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d9e2      	bls.n	80025a0 <LCD_Character+0x3c>
	}
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, SET);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6918      	ldr	r0, [r3, #16]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8a9b      	ldrh	r3, [r3, #20]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7ff f9f5 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80025ea:	2001      	movs	r0, #1
 80025ec:	f7fe fb56 	bl	8000c9c <HAL_Delay>
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6918      	ldr	r0, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8a9b      	ldrh	r3, [r3, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7ff f9ea 	bl	80019d4 <HAL_GPIO_WritePin>

	dat = (data)&0x0F;
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	73bb      	strb	r3, [r7, #14]
	for(j=0; j<4; j++){
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e019      	b.n	8002642 <LCD_Character+0xde>
		HAL_GPIO_WritePin(LCD->dataport[j], LCD->datapin[j], (dat>>j)&0x01);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	8819      	ldrh	r1, [r3, #0]
 8002626:	7bba      	ldrb	r2, [r7, #14]
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	fa42 f303 	asr.w	r3, r2, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	f7ff f9cc 	bl	80019d4 <HAL_GPIO_WritePin>
	for(j=0; j<4; j++){
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	3301      	adds	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d9e2      	bls.n	800260e <LCD_Character+0xaa>
	}
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, SET);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6918      	ldr	r0, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8a9b      	ldrh	r3, [r3, #20]
 8002650:	2201      	movs	r2, #1
 8002652:	4619      	mov	r1, r3
 8002654:	f7ff f9be 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002658:	2001      	movs	r0, #1
 800265a:	f7fe fb1f 	bl	8000c9c <HAL_Delay>
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6918      	ldr	r0, [r3, #16]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8a9b      	ldrh	r3, [r3, #20]
 8002666:	2200      	movs	r2, #0
 8002668:	4619      	mov	r1, r3
 800266a:	f7ff f9b3 	bl	80019d4 <HAL_GPIO_WritePin>

	return;
 800266e:	bf00      	nop
}
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <LCD_String>:

void LCD_String(LCD_Struct_t *LCD, char *str){
 8002676:	b590      	push	{r4, r7, lr}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
	uint8_t j;

	for(j=0; j<strlen(str); j++){
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e00a      	b.n	800269c <LCD_String+0x26>
		LCD_Character(LCD, str[j]);
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ff67 	bl	8002564 <LCD_Character>
	for(j=0; j<strlen(str); j++){
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	3301      	adds	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	7bfc      	ldrb	r4, [r7, #15]
 800269e:	6838      	ldr	r0, [r7, #0]
 80026a0:	f7fd fd9e 	bl	80001e0 <strlen>
 80026a4:	4603      	mov	r3, r0
 80026a6:	429c      	cmp	r4, r3
 80026a8:	d3ed      	bcc.n	8002686 <LCD_String+0x10>
	}

	return;
 80026aa:	bf00      	nop
}
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd90      	pop	{r4, r7, pc}
	...

080026b4 <LCD_Gotoxy>:
void LCD_Gotoxy(LCD_Struct_t *LCD, uint8_t x, uint8_t y){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	70fb      	strb	r3, [r7, #3]
 80026c0:	4613      	mov	r3, r2
 80026c2:	70bb      	strb	r3, [r7, #2]
	uint8_t conta_address;

	switch (y) {
 80026c4:	78bb      	ldrb	r3, [r7, #2]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d816      	bhi.n	80026f8 <LCD_Gotoxy+0x44>
 80026ca:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <LCD_Gotoxy+0x1c>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026e7 	.word	0x080026e7
 80026d8:	080026ed 	.word	0x080026ed
 80026dc:	080026f3 	.word	0x080026f3
	case 0:
		conta_address = 0x80;
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	73fb      	strb	r3, [r7, #15]
		break;
 80026e4:	e009      	b.n	80026fa <LCD_Gotoxy+0x46>
	case 1:
		conta_address = 0xC0;
 80026e6:	23c0      	movs	r3, #192	; 0xc0
 80026e8:	73fb      	strb	r3, [r7, #15]
		break;
 80026ea:	e006      	b.n	80026fa <LCD_Gotoxy+0x46>
	case 2:
		conta_address = 0x94;
 80026ec:	2394      	movs	r3, #148	; 0x94
 80026ee:	73fb      	strb	r3, [r7, #15]
		break;
 80026f0:	e003      	b.n	80026fa <LCD_Gotoxy+0x46>
	case 3:
		conta_address = 0xD4;
 80026f2:	23d4      	movs	r3, #212	; 0xd4
 80026f4:	73fb      	strb	r3, [r7, #15]
		break;
 80026f6:	e000      	b.n	80026fa <LCD_Gotoxy+0x46>
	default:
		break;
 80026f8:	bf00      	nop
	}

	conta_address = conta_address + x;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	4413      	add	r3, r2
 8002700:	73fb      	strb	r3, [r7, #15]
	LCD_Command(LCD, conta_address);
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fea3 	bl	8002452 <LCD_Command>

	return;
 800270c:	bf00      	nop
}
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <siprintf>:
 8002714:	b40e      	push	{r1, r2, r3}
 8002716:	b500      	push	{lr}
 8002718:	b09c      	sub	sp, #112	; 0x70
 800271a:	ab1d      	add	r3, sp, #116	; 0x74
 800271c:	9002      	str	r0, [sp, #8]
 800271e:	9006      	str	r0, [sp, #24]
 8002720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002724:	4809      	ldr	r0, [pc, #36]	; (800274c <siprintf+0x38>)
 8002726:	9107      	str	r1, [sp, #28]
 8002728:	9104      	str	r1, [sp, #16]
 800272a:	4909      	ldr	r1, [pc, #36]	; (8002750 <siprintf+0x3c>)
 800272c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002730:	9105      	str	r1, [sp, #20]
 8002732:	6800      	ldr	r0, [r0, #0]
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	a902      	add	r1, sp, #8
 8002738:	f000 f992 	bl	8002a60 <_svfiprintf_r>
 800273c:	9b02      	ldr	r3, [sp, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	b01c      	add	sp, #112	; 0x70
 8002744:	f85d eb04 	ldr.w	lr, [sp], #4
 8002748:	b003      	add	sp, #12
 800274a:	4770      	bx	lr
 800274c:	20000070 	.word	0x20000070
 8002750:	ffff0208 	.word	0xffff0208

08002754 <memset>:
 8002754:	4402      	add	r2, r0
 8002756:	4603      	mov	r3, r0
 8002758:	4293      	cmp	r3, r2
 800275a:	d100      	bne.n	800275e <memset+0xa>
 800275c:	4770      	bx	lr
 800275e:	f803 1b01 	strb.w	r1, [r3], #1
 8002762:	e7f9      	b.n	8002758 <memset+0x4>

08002764 <__errno>:
 8002764:	4b01      	ldr	r3, [pc, #4]	; (800276c <__errno+0x8>)
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000070 	.word	0x20000070

08002770 <__libc_init_array>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	4d0d      	ldr	r5, [pc, #52]	; (80027a8 <__libc_init_array+0x38>)
 8002774:	4c0d      	ldr	r4, [pc, #52]	; (80027ac <__libc_init_array+0x3c>)
 8002776:	1b64      	subs	r4, r4, r5
 8002778:	10a4      	asrs	r4, r4, #2
 800277a:	2600      	movs	r6, #0
 800277c:	42a6      	cmp	r6, r4
 800277e:	d109      	bne.n	8002794 <__libc_init_array+0x24>
 8002780:	4d0b      	ldr	r5, [pc, #44]	; (80027b0 <__libc_init_array+0x40>)
 8002782:	4c0c      	ldr	r4, [pc, #48]	; (80027b4 <__libc_init_array+0x44>)
 8002784:	f000 fc6a 	bl	800305c <_init>
 8002788:	1b64      	subs	r4, r4, r5
 800278a:	10a4      	asrs	r4, r4, #2
 800278c:	2600      	movs	r6, #0
 800278e:	42a6      	cmp	r6, r4
 8002790:	d105      	bne.n	800279e <__libc_init_array+0x2e>
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	f855 3b04 	ldr.w	r3, [r5], #4
 8002798:	4798      	blx	r3
 800279a:	3601      	adds	r6, #1
 800279c:	e7ee      	b.n	800277c <__libc_init_array+0xc>
 800279e:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a2:	4798      	blx	r3
 80027a4:	3601      	adds	r6, #1
 80027a6:	e7f2      	b.n	800278e <__libc_init_array+0x1e>
 80027a8:	08003118 	.word	0x08003118
 80027ac:	08003118 	.word	0x08003118
 80027b0:	08003118 	.word	0x08003118
 80027b4:	0800311c 	.word	0x0800311c

080027b8 <__retarget_lock_acquire_recursive>:
 80027b8:	4770      	bx	lr

080027ba <__retarget_lock_release_recursive>:
 80027ba:	4770      	bx	lr

080027bc <_free_r>:
 80027bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027be:	2900      	cmp	r1, #0
 80027c0:	d044      	beq.n	800284c <_free_r+0x90>
 80027c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027c6:	9001      	str	r0, [sp, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f1a1 0404 	sub.w	r4, r1, #4
 80027ce:	bfb8      	it	lt
 80027d0:	18e4      	addlt	r4, r4, r3
 80027d2:	f000 f8df 	bl	8002994 <__malloc_lock>
 80027d6:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <_free_r+0x94>)
 80027d8:	9801      	ldr	r0, [sp, #4]
 80027da:	6813      	ldr	r3, [r2, #0]
 80027dc:	b933      	cbnz	r3, 80027ec <_free_r+0x30>
 80027de:	6063      	str	r3, [r4, #4]
 80027e0:	6014      	str	r4, [r2, #0]
 80027e2:	b003      	add	sp, #12
 80027e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80027e8:	f000 b8da 	b.w	80029a0 <__malloc_unlock>
 80027ec:	42a3      	cmp	r3, r4
 80027ee:	d908      	bls.n	8002802 <_free_r+0x46>
 80027f0:	6825      	ldr	r5, [r4, #0]
 80027f2:	1961      	adds	r1, r4, r5
 80027f4:	428b      	cmp	r3, r1
 80027f6:	bf01      	itttt	eq
 80027f8:	6819      	ldreq	r1, [r3, #0]
 80027fa:	685b      	ldreq	r3, [r3, #4]
 80027fc:	1949      	addeq	r1, r1, r5
 80027fe:	6021      	streq	r1, [r4, #0]
 8002800:	e7ed      	b.n	80027de <_free_r+0x22>
 8002802:	461a      	mov	r2, r3
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	b10b      	cbz	r3, 800280c <_free_r+0x50>
 8002808:	42a3      	cmp	r3, r4
 800280a:	d9fa      	bls.n	8002802 <_free_r+0x46>
 800280c:	6811      	ldr	r1, [r2, #0]
 800280e:	1855      	adds	r5, r2, r1
 8002810:	42a5      	cmp	r5, r4
 8002812:	d10b      	bne.n	800282c <_free_r+0x70>
 8002814:	6824      	ldr	r4, [r4, #0]
 8002816:	4421      	add	r1, r4
 8002818:	1854      	adds	r4, r2, r1
 800281a:	42a3      	cmp	r3, r4
 800281c:	6011      	str	r1, [r2, #0]
 800281e:	d1e0      	bne.n	80027e2 <_free_r+0x26>
 8002820:	681c      	ldr	r4, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	6053      	str	r3, [r2, #4]
 8002826:	440c      	add	r4, r1
 8002828:	6014      	str	r4, [r2, #0]
 800282a:	e7da      	b.n	80027e2 <_free_r+0x26>
 800282c:	d902      	bls.n	8002834 <_free_r+0x78>
 800282e:	230c      	movs	r3, #12
 8002830:	6003      	str	r3, [r0, #0]
 8002832:	e7d6      	b.n	80027e2 <_free_r+0x26>
 8002834:	6825      	ldr	r5, [r4, #0]
 8002836:	1961      	adds	r1, r4, r5
 8002838:	428b      	cmp	r3, r1
 800283a:	bf04      	itt	eq
 800283c:	6819      	ldreq	r1, [r3, #0]
 800283e:	685b      	ldreq	r3, [r3, #4]
 8002840:	6063      	str	r3, [r4, #4]
 8002842:	bf04      	itt	eq
 8002844:	1949      	addeq	r1, r1, r5
 8002846:	6021      	streq	r1, [r4, #0]
 8002848:	6054      	str	r4, [r2, #4]
 800284a:	e7ca      	b.n	80027e2 <_free_r+0x26>
 800284c:	b003      	add	sp, #12
 800284e:	bd30      	pop	{r4, r5, pc}
 8002850:	20000238 	.word	0x20000238

08002854 <sbrk_aligned>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	4e0e      	ldr	r6, [pc, #56]	; (8002890 <sbrk_aligned+0x3c>)
 8002858:	460c      	mov	r4, r1
 800285a:	6831      	ldr	r1, [r6, #0]
 800285c:	4605      	mov	r5, r0
 800285e:	b911      	cbnz	r1, 8002866 <sbrk_aligned+0x12>
 8002860:	f000 fba6 	bl	8002fb0 <_sbrk_r>
 8002864:	6030      	str	r0, [r6, #0]
 8002866:	4621      	mov	r1, r4
 8002868:	4628      	mov	r0, r5
 800286a:	f000 fba1 	bl	8002fb0 <_sbrk_r>
 800286e:	1c43      	adds	r3, r0, #1
 8002870:	d00a      	beq.n	8002888 <sbrk_aligned+0x34>
 8002872:	1cc4      	adds	r4, r0, #3
 8002874:	f024 0403 	bic.w	r4, r4, #3
 8002878:	42a0      	cmp	r0, r4
 800287a:	d007      	beq.n	800288c <sbrk_aligned+0x38>
 800287c:	1a21      	subs	r1, r4, r0
 800287e:	4628      	mov	r0, r5
 8002880:	f000 fb96 	bl	8002fb0 <_sbrk_r>
 8002884:	3001      	adds	r0, #1
 8002886:	d101      	bne.n	800288c <sbrk_aligned+0x38>
 8002888:	f04f 34ff 	mov.w	r4, #4294967295
 800288c:	4620      	mov	r0, r4
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	2000023c 	.word	0x2000023c

08002894 <_malloc_r>:
 8002894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002898:	1ccd      	adds	r5, r1, #3
 800289a:	f025 0503 	bic.w	r5, r5, #3
 800289e:	3508      	adds	r5, #8
 80028a0:	2d0c      	cmp	r5, #12
 80028a2:	bf38      	it	cc
 80028a4:	250c      	movcc	r5, #12
 80028a6:	2d00      	cmp	r5, #0
 80028a8:	4607      	mov	r7, r0
 80028aa:	db01      	blt.n	80028b0 <_malloc_r+0x1c>
 80028ac:	42a9      	cmp	r1, r5
 80028ae:	d905      	bls.n	80028bc <_malloc_r+0x28>
 80028b0:	230c      	movs	r3, #12
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	2600      	movs	r6, #0
 80028b6:	4630      	mov	r0, r6
 80028b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002990 <_malloc_r+0xfc>
 80028c0:	f000 f868 	bl	8002994 <__malloc_lock>
 80028c4:	f8d8 3000 	ldr.w	r3, [r8]
 80028c8:	461c      	mov	r4, r3
 80028ca:	bb5c      	cbnz	r4, 8002924 <_malloc_r+0x90>
 80028cc:	4629      	mov	r1, r5
 80028ce:	4638      	mov	r0, r7
 80028d0:	f7ff ffc0 	bl	8002854 <sbrk_aligned>
 80028d4:	1c43      	adds	r3, r0, #1
 80028d6:	4604      	mov	r4, r0
 80028d8:	d155      	bne.n	8002986 <_malloc_r+0xf2>
 80028da:	f8d8 4000 	ldr.w	r4, [r8]
 80028de:	4626      	mov	r6, r4
 80028e0:	2e00      	cmp	r6, #0
 80028e2:	d145      	bne.n	8002970 <_malloc_r+0xdc>
 80028e4:	2c00      	cmp	r4, #0
 80028e6:	d048      	beq.n	800297a <_malloc_r+0xe6>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	4631      	mov	r1, r6
 80028ec:	4638      	mov	r0, r7
 80028ee:	eb04 0903 	add.w	r9, r4, r3
 80028f2:	f000 fb5d 	bl	8002fb0 <_sbrk_r>
 80028f6:	4581      	cmp	r9, r0
 80028f8:	d13f      	bne.n	800297a <_malloc_r+0xe6>
 80028fa:	6821      	ldr	r1, [r4, #0]
 80028fc:	1a6d      	subs	r5, r5, r1
 80028fe:	4629      	mov	r1, r5
 8002900:	4638      	mov	r0, r7
 8002902:	f7ff ffa7 	bl	8002854 <sbrk_aligned>
 8002906:	3001      	adds	r0, #1
 8002908:	d037      	beq.n	800297a <_malloc_r+0xe6>
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	442b      	add	r3, r5
 800290e:	6023      	str	r3, [r4, #0]
 8002910:	f8d8 3000 	ldr.w	r3, [r8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d038      	beq.n	800298a <_malloc_r+0xf6>
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	42a2      	cmp	r2, r4
 800291c:	d12b      	bne.n	8002976 <_malloc_r+0xe2>
 800291e:	2200      	movs	r2, #0
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	e00f      	b.n	8002944 <_malloc_r+0xb0>
 8002924:	6822      	ldr	r2, [r4, #0]
 8002926:	1b52      	subs	r2, r2, r5
 8002928:	d41f      	bmi.n	800296a <_malloc_r+0xd6>
 800292a:	2a0b      	cmp	r2, #11
 800292c:	d917      	bls.n	800295e <_malloc_r+0xca>
 800292e:	1961      	adds	r1, r4, r5
 8002930:	42a3      	cmp	r3, r4
 8002932:	6025      	str	r5, [r4, #0]
 8002934:	bf18      	it	ne
 8002936:	6059      	strne	r1, [r3, #4]
 8002938:	6863      	ldr	r3, [r4, #4]
 800293a:	bf08      	it	eq
 800293c:	f8c8 1000 	streq.w	r1, [r8]
 8002940:	5162      	str	r2, [r4, r5]
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	4638      	mov	r0, r7
 8002946:	f104 060b 	add.w	r6, r4, #11
 800294a:	f000 f829 	bl	80029a0 <__malloc_unlock>
 800294e:	f026 0607 	bic.w	r6, r6, #7
 8002952:	1d23      	adds	r3, r4, #4
 8002954:	1af2      	subs	r2, r6, r3
 8002956:	d0ae      	beq.n	80028b6 <_malloc_r+0x22>
 8002958:	1b9b      	subs	r3, r3, r6
 800295a:	50a3      	str	r3, [r4, r2]
 800295c:	e7ab      	b.n	80028b6 <_malloc_r+0x22>
 800295e:	42a3      	cmp	r3, r4
 8002960:	6862      	ldr	r2, [r4, #4]
 8002962:	d1dd      	bne.n	8002920 <_malloc_r+0x8c>
 8002964:	f8c8 2000 	str.w	r2, [r8]
 8002968:	e7ec      	b.n	8002944 <_malloc_r+0xb0>
 800296a:	4623      	mov	r3, r4
 800296c:	6864      	ldr	r4, [r4, #4]
 800296e:	e7ac      	b.n	80028ca <_malloc_r+0x36>
 8002970:	4634      	mov	r4, r6
 8002972:	6876      	ldr	r6, [r6, #4]
 8002974:	e7b4      	b.n	80028e0 <_malloc_r+0x4c>
 8002976:	4613      	mov	r3, r2
 8002978:	e7cc      	b.n	8002914 <_malloc_r+0x80>
 800297a:	230c      	movs	r3, #12
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	4638      	mov	r0, r7
 8002980:	f000 f80e 	bl	80029a0 <__malloc_unlock>
 8002984:	e797      	b.n	80028b6 <_malloc_r+0x22>
 8002986:	6025      	str	r5, [r4, #0]
 8002988:	e7dc      	b.n	8002944 <_malloc_r+0xb0>
 800298a:	605b      	str	r3, [r3, #4]
 800298c:	deff      	udf	#255	; 0xff
 800298e:	bf00      	nop
 8002990:	20000238 	.word	0x20000238

08002994 <__malloc_lock>:
 8002994:	4801      	ldr	r0, [pc, #4]	; (800299c <__malloc_lock+0x8>)
 8002996:	f7ff bf0f 	b.w	80027b8 <__retarget_lock_acquire_recursive>
 800299a:	bf00      	nop
 800299c:	20000234 	.word	0x20000234

080029a0 <__malloc_unlock>:
 80029a0:	4801      	ldr	r0, [pc, #4]	; (80029a8 <__malloc_unlock+0x8>)
 80029a2:	f7ff bf0a 	b.w	80027ba <__retarget_lock_release_recursive>
 80029a6:	bf00      	nop
 80029a8:	20000234 	.word	0x20000234

080029ac <__ssputs_r>:
 80029ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b0:	688e      	ldr	r6, [r1, #8]
 80029b2:	461f      	mov	r7, r3
 80029b4:	42be      	cmp	r6, r7
 80029b6:	680b      	ldr	r3, [r1, #0]
 80029b8:	4682      	mov	sl, r0
 80029ba:	460c      	mov	r4, r1
 80029bc:	4690      	mov	r8, r2
 80029be:	d82c      	bhi.n	8002a1a <__ssputs_r+0x6e>
 80029c0:	898a      	ldrh	r2, [r1, #12]
 80029c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029c6:	d026      	beq.n	8002a16 <__ssputs_r+0x6a>
 80029c8:	6965      	ldr	r5, [r4, #20]
 80029ca:	6909      	ldr	r1, [r1, #16]
 80029cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029d0:	eba3 0901 	sub.w	r9, r3, r1
 80029d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029d8:	1c7b      	adds	r3, r7, #1
 80029da:	444b      	add	r3, r9
 80029dc:	106d      	asrs	r5, r5, #1
 80029de:	429d      	cmp	r5, r3
 80029e0:	bf38      	it	cc
 80029e2:	461d      	movcc	r5, r3
 80029e4:	0553      	lsls	r3, r2, #21
 80029e6:	d527      	bpl.n	8002a38 <__ssputs_r+0x8c>
 80029e8:	4629      	mov	r1, r5
 80029ea:	f7ff ff53 	bl	8002894 <_malloc_r>
 80029ee:	4606      	mov	r6, r0
 80029f0:	b360      	cbz	r0, 8002a4c <__ssputs_r+0xa0>
 80029f2:	6921      	ldr	r1, [r4, #16]
 80029f4:	464a      	mov	r2, r9
 80029f6:	f000 faeb 	bl	8002fd0 <memcpy>
 80029fa:	89a3      	ldrh	r3, [r4, #12]
 80029fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a04:	81a3      	strh	r3, [r4, #12]
 8002a06:	6126      	str	r6, [r4, #16]
 8002a08:	6165      	str	r5, [r4, #20]
 8002a0a:	444e      	add	r6, r9
 8002a0c:	eba5 0509 	sub.w	r5, r5, r9
 8002a10:	6026      	str	r6, [r4, #0]
 8002a12:	60a5      	str	r5, [r4, #8]
 8002a14:	463e      	mov	r6, r7
 8002a16:	42be      	cmp	r6, r7
 8002a18:	d900      	bls.n	8002a1c <__ssputs_r+0x70>
 8002a1a:	463e      	mov	r6, r7
 8002a1c:	6820      	ldr	r0, [r4, #0]
 8002a1e:	4632      	mov	r2, r6
 8002a20:	4641      	mov	r1, r8
 8002a22:	f000 faab 	bl	8002f7c <memmove>
 8002a26:	68a3      	ldr	r3, [r4, #8]
 8002a28:	1b9b      	subs	r3, r3, r6
 8002a2a:	60a3      	str	r3, [r4, #8]
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	4433      	add	r3, r6
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	2000      	movs	r0, #0
 8002a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a38:	462a      	mov	r2, r5
 8002a3a:	f000 fad7 	bl	8002fec <_realloc_r>
 8002a3e:	4606      	mov	r6, r0
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d1e0      	bne.n	8002a06 <__ssputs_r+0x5a>
 8002a44:	6921      	ldr	r1, [r4, #16]
 8002a46:	4650      	mov	r0, sl
 8002a48:	f7ff feb8 	bl	80027bc <_free_r>
 8002a4c:	230c      	movs	r3, #12
 8002a4e:	f8ca 3000 	str.w	r3, [sl]
 8002a52:	89a3      	ldrh	r3, [r4, #12]
 8002a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a58:	81a3      	strh	r3, [r4, #12]
 8002a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5e:	e7e9      	b.n	8002a34 <__ssputs_r+0x88>

08002a60 <_svfiprintf_r>:
 8002a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a64:	4698      	mov	r8, r3
 8002a66:	898b      	ldrh	r3, [r1, #12]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	b09d      	sub	sp, #116	; 0x74
 8002a6c:	4607      	mov	r7, r0
 8002a6e:	460d      	mov	r5, r1
 8002a70:	4614      	mov	r4, r2
 8002a72:	d50e      	bpl.n	8002a92 <_svfiprintf_r+0x32>
 8002a74:	690b      	ldr	r3, [r1, #16]
 8002a76:	b963      	cbnz	r3, 8002a92 <_svfiprintf_r+0x32>
 8002a78:	2140      	movs	r1, #64	; 0x40
 8002a7a:	f7ff ff0b 	bl	8002894 <_malloc_r>
 8002a7e:	6028      	str	r0, [r5, #0]
 8002a80:	6128      	str	r0, [r5, #16]
 8002a82:	b920      	cbnz	r0, 8002a8e <_svfiprintf_r+0x2e>
 8002a84:	230c      	movs	r3, #12
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	e0d0      	b.n	8002c30 <_svfiprintf_r+0x1d0>
 8002a8e:	2340      	movs	r3, #64	; 0x40
 8002a90:	616b      	str	r3, [r5, #20]
 8002a92:	2300      	movs	r3, #0
 8002a94:	9309      	str	r3, [sp, #36]	; 0x24
 8002a96:	2320      	movs	r3, #32
 8002a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002aa0:	2330      	movs	r3, #48	; 0x30
 8002aa2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002c48 <_svfiprintf_r+0x1e8>
 8002aa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aaa:	f04f 0901 	mov.w	r9, #1
 8002aae:	4623      	mov	r3, r4
 8002ab0:	469a      	mov	sl, r3
 8002ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ab6:	b10a      	cbz	r2, 8002abc <_svfiprintf_r+0x5c>
 8002ab8:	2a25      	cmp	r2, #37	; 0x25
 8002aba:	d1f9      	bne.n	8002ab0 <_svfiprintf_r+0x50>
 8002abc:	ebba 0b04 	subs.w	fp, sl, r4
 8002ac0:	d00b      	beq.n	8002ada <_svfiprintf_r+0x7a>
 8002ac2:	465b      	mov	r3, fp
 8002ac4:	4622      	mov	r2, r4
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	4638      	mov	r0, r7
 8002aca:	f7ff ff6f 	bl	80029ac <__ssputs_r>
 8002ace:	3001      	adds	r0, #1
 8002ad0:	f000 80a9 	beq.w	8002c26 <_svfiprintf_r+0x1c6>
 8002ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ad6:	445a      	add	r2, fp
 8002ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8002ada:	f89a 3000 	ldrb.w	r3, [sl]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80a1 	beq.w	8002c26 <_svfiprintf_r+0x1c6>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aee:	f10a 0a01 	add.w	sl, sl, #1
 8002af2:	9304      	str	r3, [sp, #16]
 8002af4:	9307      	str	r3, [sp, #28]
 8002af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002afa:	931a      	str	r3, [sp, #104]	; 0x68
 8002afc:	4654      	mov	r4, sl
 8002afe:	2205      	movs	r2, #5
 8002b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b04:	4850      	ldr	r0, [pc, #320]	; (8002c48 <_svfiprintf_r+0x1e8>)
 8002b06:	f7fd fb73 	bl	80001f0 <memchr>
 8002b0a:	9a04      	ldr	r2, [sp, #16]
 8002b0c:	b9d8      	cbnz	r0, 8002b46 <_svfiprintf_r+0xe6>
 8002b0e:	06d0      	lsls	r0, r2, #27
 8002b10:	bf44      	itt	mi
 8002b12:	2320      	movmi	r3, #32
 8002b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b18:	0711      	lsls	r1, r2, #28
 8002b1a:	bf44      	itt	mi
 8002b1c:	232b      	movmi	r3, #43	; 0x2b
 8002b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b22:	f89a 3000 	ldrb.w	r3, [sl]
 8002b26:	2b2a      	cmp	r3, #42	; 0x2a
 8002b28:	d015      	beq.n	8002b56 <_svfiprintf_r+0xf6>
 8002b2a:	9a07      	ldr	r2, [sp, #28]
 8002b2c:	4654      	mov	r4, sl
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f04f 0c0a 	mov.w	ip, #10
 8002b34:	4621      	mov	r1, r4
 8002b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b3a:	3b30      	subs	r3, #48	; 0x30
 8002b3c:	2b09      	cmp	r3, #9
 8002b3e:	d94d      	bls.n	8002bdc <_svfiprintf_r+0x17c>
 8002b40:	b1b0      	cbz	r0, 8002b70 <_svfiprintf_r+0x110>
 8002b42:	9207      	str	r2, [sp, #28]
 8002b44:	e014      	b.n	8002b70 <_svfiprintf_r+0x110>
 8002b46:	eba0 0308 	sub.w	r3, r0, r8
 8002b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	9304      	str	r3, [sp, #16]
 8002b52:	46a2      	mov	sl, r4
 8002b54:	e7d2      	b.n	8002afc <_svfiprintf_r+0x9c>
 8002b56:	9b03      	ldr	r3, [sp, #12]
 8002b58:	1d19      	adds	r1, r3, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	9103      	str	r1, [sp, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bfbb      	ittet	lt
 8002b62:	425b      	neglt	r3, r3
 8002b64:	f042 0202 	orrlt.w	r2, r2, #2
 8002b68:	9307      	strge	r3, [sp, #28]
 8002b6a:	9307      	strlt	r3, [sp, #28]
 8002b6c:	bfb8      	it	lt
 8002b6e:	9204      	strlt	r2, [sp, #16]
 8002b70:	7823      	ldrb	r3, [r4, #0]
 8002b72:	2b2e      	cmp	r3, #46	; 0x2e
 8002b74:	d10c      	bne.n	8002b90 <_svfiprintf_r+0x130>
 8002b76:	7863      	ldrb	r3, [r4, #1]
 8002b78:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7a:	d134      	bne.n	8002be6 <_svfiprintf_r+0x186>
 8002b7c:	9b03      	ldr	r3, [sp, #12]
 8002b7e:	1d1a      	adds	r2, r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	9203      	str	r2, [sp, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bfb8      	it	lt
 8002b88:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b8c:	3402      	adds	r4, #2
 8002b8e:	9305      	str	r3, [sp, #20]
 8002b90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002c58 <_svfiprintf_r+0x1f8>
 8002b94:	7821      	ldrb	r1, [r4, #0]
 8002b96:	2203      	movs	r2, #3
 8002b98:	4650      	mov	r0, sl
 8002b9a:	f7fd fb29 	bl	80001f0 <memchr>
 8002b9e:	b138      	cbz	r0, 8002bb0 <_svfiprintf_r+0x150>
 8002ba0:	9b04      	ldr	r3, [sp, #16]
 8002ba2:	eba0 000a 	sub.w	r0, r0, sl
 8002ba6:	2240      	movs	r2, #64	; 0x40
 8002ba8:	4082      	lsls	r2, r0
 8002baa:	4313      	orrs	r3, r2
 8002bac:	3401      	adds	r4, #1
 8002bae:	9304      	str	r3, [sp, #16]
 8002bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bb4:	4825      	ldr	r0, [pc, #148]	; (8002c4c <_svfiprintf_r+0x1ec>)
 8002bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bba:	2206      	movs	r2, #6
 8002bbc:	f7fd fb18 	bl	80001f0 <memchr>
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d038      	beq.n	8002c36 <_svfiprintf_r+0x1d6>
 8002bc4:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <_svfiprintf_r+0x1f0>)
 8002bc6:	bb1b      	cbnz	r3, 8002c10 <_svfiprintf_r+0x1b0>
 8002bc8:	9b03      	ldr	r3, [sp, #12]
 8002bca:	3307      	adds	r3, #7
 8002bcc:	f023 0307 	bic.w	r3, r3, #7
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	9303      	str	r3, [sp, #12]
 8002bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bd6:	4433      	add	r3, r6
 8002bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8002bda:	e768      	b.n	8002aae <_svfiprintf_r+0x4e>
 8002bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002be0:	460c      	mov	r4, r1
 8002be2:	2001      	movs	r0, #1
 8002be4:	e7a6      	b.n	8002b34 <_svfiprintf_r+0xd4>
 8002be6:	2300      	movs	r3, #0
 8002be8:	3401      	adds	r4, #1
 8002bea:	9305      	str	r3, [sp, #20]
 8002bec:	4619      	mov	r1, r3
 8002bee:	f04f 0c0a 	mov.w	ip, #10
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bf8:	3a30      	subs	r2, #48	; 0x30
 8002bfa:	2a09      	cmp	r2, #9
 8002bfc:	d903      	bls.n	8002c06 <_svfiprintf_r+0x1a6>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0c6      	beq.n	8002b90 <_svfiprintf_r+0x130>
 8002c02:	9105      	str	r1, [sp, #20]
 8002c04:	e7c4      	b.n	8002b90 <_svfiprintf_r+0x130>
 8002c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e7f0      	b.n	8002bf2 <_svfiprintf_r+0x192>
 8002c10:	ab03      	add	r3, sp, #12
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	462a      	mov	r2, r5
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <_svfiprintf_r+0x1f4>)
 8002c18:	a904      	add	r1, sp, #16
 8002c1a:	4638      	mov	r0, r7
 8002c1c:	f3af 8000 	nop.w
 8002c20:	1c42      	adds	r2, r0, #1
 8002c22:	4606      	mov	r6, r0
 8002c24:	d1d6      	bne.n	8002bd4 <_svfiprintf_r+0x174>
 8002c26:	89ab      	ldrh	r3, [r5, #12]
 8002c28:	065b      	lsls	r3, r3, #25
 8002c2a:	f53f af2d 	bmi.w	8002a88 <_svfiprintf_r+0x28>
 8002c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c30:	b01d      	add	sp, #116	; 0x74
 8002c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c36:	ab03      	add	r3, sp, #12
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	462a      	mov	r2, r5
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <_svfiprintf_r+0x1f4>)
 8002c3e:	a904      	add	r1, sp, #16
 8002c40:	4638      	mov	r0, r7
 8002c42:	f000 f879 	bl	8002d38 <_printf_i>
 8002c46:	e7eb      	b.n	8002c20 <_svfiprintf_r+0x1c0>
 8002c48:	080030dc 	.word	0x080030dc
 8002c4c:	080030e6 	.word	0x080030e6
 8002c50:	00000000 	.word	0x00000000
 8002c54:	080029ad 	.word	0x080029ad
 8002c58:	080030e2 	.word	0x080030e2

08002c5c <_printf_common>:
 8002c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c60:	4616      	mov	r6, r2
 8002c62:	4699      	mov	r9, r3
 8002c64:	688a      	ldr	r2, [r1, #8]
 8002c66:	690b      	ldr	r3, [r1, #16]
 8002c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bfb8      	it	lt
 8002c70:	4613      	movlt	r3, r2
 8002c72:	6033      	str	r3, [r6, #0]
 8002c74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c78:	4607      	mov	r7, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	b10a      	cbz	r2, 8002c82 <_printf_common+0x26>
 8002c7e:	3301      	adds	r3, #1
 8002c80:	6033      	str	r3, [r6, #0]
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	0699      	lsls	r1, r3, #26
 8002c86:	bf42      	ittt	mi
 8002c88:	6833      	ldrmi	r3, [r6, #0]
 8002c8a:	3302      	addmi	r3, #2
 8002c8c:	6033      	strmi	r3, [r6, #0]
 8002c8e:	6825      	ldr	r5, [r4, #0]
 8002c90:	f015 0506 	ands.w	r5, r5, #6
 8002c94:	d106      	bne.n	8002ca4 <_printf_common+0x48>
 8002c96:	f104 0a19 	add.w	sl, r4, #25
 8002c9a:	68e3      	ldr	r3, [r4, #12]
 8002c9c:	6832      	ldr	r2, [r6, #0]
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	42ab      	cmp	r3, r5
 8002ca2:	dc26      	bgt.n	8002cf2 <_printf_common+0x96>
 8002ca4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ca8:	1e13      	subs	r3, r2, #0
 8002caa:	6822      	ldr	r2, [r4, #0]
 8002cac:	bf18      	it	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	0692      	lsls	r2, r2, #26
 8002cb2:	d42b      	bmi.n	8002d0c <_printf_common+0xb0>
 8002cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cb8:	4649      	mov	r1, r9
 8002cba:	4638      	mov	r0, r7
 8002cbc:	47c0      	blx	r8
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	d01e      	beq.n	8002d00 <_printf_common+0xa4>
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	6922      	ldr	r2, [r4, #16]
 8002cc6:	f003 0306 	and.w	r3, r3, #6
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	bf02      	ittt	eq
 8002cce:	68e5      	ldreq	r5, [r4, #12]
 8002cd0:	6833      	ldreq	r3, [r6, #0]
 8002cd2:	1aed      	subeq	r5, r5, r3
 8002cd4:	68a3      	ldr	r3, [r4, #8]
 8002cd6:	bf0c      	ite	eq
 8002cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cdc:	2500      	movne	r5, #0
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	bfc4      	itt	gt
 8002ce2:	1a9b      	subgt	r3, r3, r2
 8002ce4:	18ed      	addgt	r5, r5, r3
 8002ce6:	2600      	movs	r6, #0
 8002ce8:	341a      	adds	r4, #26
 8002cea:	42b5      	cmp	r5, r6
 8002cec:	d11a      	bne.n	8002d24 <_printf_common+0xc8>
 8002cee:	2000      	movs	r0, #0
 8002cf0:	e008      	b.n	8002d04 <_printf_common+0xa8>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	4652      	mov	r2, sl
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	47c0      	blx	r8
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d103      	bne.n	8002d08 <_printf_common+0xac>
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d08:	3501      	adds	r5, #1
 8002d0a:	e7c6      	b.n	8002c9a <_printf_common+0x3e>
 8002d0c:	18e1      	adds	r1, r4, r3
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	2030      	movs	r0, #48	; 0x30
 8002d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d16:	4422      	add	r2, r4
 8002d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d20:	3302      	adds	r3, #2
 8002d22:	e7c7      	b.n	8002cb4 <_printf_common+0x58>
 8002d24:	2301      	movs	r3, #1
 8002d26:	4622      	mov	r2, r4
 8002d28:	4649      	mov	r1, r9
 8002d2a:	4638      	mov	r0, r7
 8002d2c:	47c0      	blx	r8
 8002d2e:	3001      	adds	r0, #1
 8002d30:	d0e6      	beq.n	8002d00 <_printf_common+0xa4>
 8002d32:	3601      	adds	r6, #1
 8002d34:	e7d9      	b.n	8002cea <_printf_common+0x8e>
	...

08002d38 <_printf_i>:
 8002d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d3c:	7e0f      	ldrb	r7, [r1, #24]
 8002d3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d40:	2f78      	cmp	r7, #120	; 0x78
 8002d42:	4691      	mov	r9, r2
 8002d44:	4680      	mov	r8, r0
 8002d46:	460c      	mov	r4, r1
 8002d48:	469a      	mov	sl, r3
 8002d4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d4e:	d807      	bhi.n	8002d60 <_printf_i+0x28>
 8002d50:	2f62      	cmp	r7, #98	; 0x62
 8002d52:	d80a      	bhi.n	8002d6a <_printf_i+0x32>
 8002d54:	2f00      	cmp	r7, #0
 8002d56:	f000 80d4 	beq.w	8002f02 <_printf_i+0x1ca>
 8002d5a:	2f58      	cmp	r7, #88	; 0x58
 8002d5c:	f000 80c0 	beq.w	8002ee0 <_printf_i+0x1a8>
 8002d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d68:	e03a      	b.n	8002de0 <_printf_i+0xa8>
 8002d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d6e:	2b15      	cmp	r3, #21
 8002d70:	d8f6      	bhi.n	8002d60 <_printf_i+0x28>
 8002d72:	a101      	add	r1, pc, #4	; (adr r1, 8002d78 <_printf_i+0x40>)
 8002d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d78:	08002dd1 	.word	0x08002dd1
 8002d7c:	08002de5 	.word	0x08002de5
 8002d80:	08002d61 	.word	0x08002d61
 8002d84:	08002d61 	.word	0x08002d61
 8002d88:	08002d61 	.word	0x08002d61
 8002d8c:	08002d61 	.word	0x08002d61
 8002d90:	08002de5 	.word	0x08002de5
 8002d94:	08002d61 	.word	0x08002d61
 8002d98:	08002d61 	.word	0x08002d61
 8002d9c:	08002d61 	.word	0x08002d61
 8002da0:	08002d61 	.word	0x08002d61
 8002da4:	08002ee9 	.word	0x08002ee9
 8002da8:	08002e11 	.word	0x08002e11
 8002dac:	08002ea3 	.word	0x08002ea3
 8002db0:	08002d61 	.word	0x08002d61
 8002db4:	08002d61 	.word	0x08002d61
 8002db8:	08002f0b 	.word	0x08002f0b
 8002dbc:	08002d61 	.word	0x08002d61
 8002dc0:	08002e11 	.word	0x08002e11
 8002dc4:	08002d61 	.word	0x08002d61
 8002dc8:	08002d61 	.word	0x08002d61
 8002dcc:	08002eab 	.word	0x08002eab
 8002dd0:	682b      	ldr	r3, [r5, #0]
 8002dd2:	1d1a      	adds	r2, r3, #4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	602a      	str	r2, [r5, #0]
 8002dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002de0:	2301      	movs	r3, #1
 8002de2:	e09f      	b.n	8002f24 <_printf_i+0x1ec>
 8002de4:	6820      	ldr	r0, [r4, #0]
 8002de6:	682b      	ldr	r3, [r5, #0]
 8002de8:	0607      	lsls	r7, r0, #24
 8002dea:	f103 0104 	add.w	r1, r3, #4
 8002dee:	6029      	str	r1, [r5, #0]
 8002df0:	d501      	bpl.n	8002df6 <_printf_i+0xbe>
 8002df2:	681e      	ldr	r6, [r3, #0]
 8002df4:	e003      	b.n	8002dfe <_printf_i+0xc6>
 8002df6:	0646      	lsls	r6, r0, #25
 8002df8:	d5fb      	bpl.n	8002df2 <_printf_i+0xba>
 8002dfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002dfe:	2e00      	cmp	r6, #0
 8002e00:	da03      	bge.n	8002e0a <_printf_i+0xd2>
 8002e02:	232d      	movs	r3, #45	; 0x2d
 8002e04:	4276      	negs	r6, r6
 8002e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e0a:	485a      	ldr	r0, [pc, #360]	; (8002f74 <_printf_i+0x23c>)
 8002e0c:	230a      	movs	r3, #10
 8002e0e:	e012      	b.n	8002e36 <_printf_i+0xfe>
 8002e10:	682b      	ldr	r3, [r5, #0]
 8002e12:	6820      	ldr	r0, [r4, #0]
 8002e14:	1d19      	adds	r1, r3, #4
 8002e16:	6029      	str	r1, [r5, #0]
 8002e18:	0605      	lsls	r5, r0, #24
 8002e1a:	d501      	bpl.n	8002e20 <_printf_i+0xe8>
 8002e1c:	681e      	ldr	r6, [r3, #0]
 8002e1e:	e002      	b.n	8002e26 <_printf_i+0xee>
 8002e20:	0641      	lsls	r1, r0, #25
 8002e22:	d5fb      	bpl.n	8002e1c <_printf_i+0xe4>
 8002e24:	881e      	ldrh	r6, [r3, #0]
 8002e26:	4853      	ldr	r0, [pc, #332]	; (8002f74 <_printf_i+0x23c>)
 8002e28:	2f6f      	cmp	r7, #111	; 0x6f
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2308      	moveq	r3, #8
 8002e2e:	230a      	movne	r3, #10
 8002e30:	2100      	movs	r1, #0
 8002e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e36:	6865      	ldr	r5, [r4, #4]
 8002e38:	60a5      	str	r5, [r4, #8]
 8002e3a:	2d00      	cmp	r5, #0
 8002e3c:	bfa2      	ittt	ge
 8002e3e:	6821      	ldrge	r1, [r4, #0]
 8002e40:	f021 0104 	bicge.w	r1, r1, #4
 8002e44:	6021      	strge	r1, [r4, #0]
 8002e46:	b90e      	cbnz	r6, 8002e4c <_printf_i+0x114>
 8002e48:	2d00      	cmp	r5, #0
 8002e4a:	d04b      	beq.n	8002ee4 <_printf_i+0x1ac>
 8002e4c:	4615      	mov	r5, r2
 8002e4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e52:	fb03 6711 	mls	r7, r3, r1, r6
 8002e56:	5dc7      	ldrb	r7, [r0, r7]
 8002e58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e5c:	4637      	mov	r7, r6
 8002e5e:	42bb      	cmp	r3, r7
 8002e60:	460e      	mov	r6, r1
 8002e62:	d9f4      	bls.n	8002e4e <_printf_i+0x116>
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d10b      	bne.n	8002e80 <_printf_i+0x148>
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	07de      	lsls	r6, r3, #31
 8002e6c:	d508      	bpl.n	8002e80 <_printf_i+0x148>
 8002e6e:	6923      	ldr	r3, [r4, #16]
 8002e70:	6861      	ldr	r1, [r4, #4]
 8002e72:	4299      	cmp	r1, r3
 8002e74:	bfde      	ittt	le
 8002e76:	2330      	movle	r3, #48	; 0x30
 8002e78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e80:	1b52      	subs	r2, r2, r5
 8002e82:	6122      	str	r2, [r4, #16]
 8002e84:	f8cd a000 	str.w	sl, [sp]
 8002e88:	464b      	mov	r3, r9
 8002e8a:	aa03      	add	r2, sp, #12
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	4640      	mov	r0, r8
 8002e90:	f7ff fee4 	bl	8002c5c <_printf_common>
 8002e94:	3001      	adds	r0, #1
 8002e96:	d14a      	bne.n	8002f2e <_printf_i+0x1f6>
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	b004      	add	sp, #16
 8002e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	f043 0320 	orr.w	r3, r3, #32
 8002ea8:	6023      	str	r3, [r4, #0]
 8002eaa:	4833      	ldr	r0, [pc, #204]	; (8002f78 <_printf_i+0x240>)
 8002eac:	2778      	movs	r7, #120	; 0x78
 8002eae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	6829      	ldr	r1, [r5, #0]
 8002eb6:	061f      	lsls	r7, r3, #24
 8002eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ebc:	d402      	bmi.n	8002ec4 <_printf_i+0x18c>
 8002ebe:	065f      	lsls	r7, r3, #25
 8002ec0:	bf48      	it	mi
 8002ec2:	b2b6      	uxthmi	r6, r6
 8002ec4:	07df      	lsls	r7, r3, #31
 8002ec6:	bf48      	it	mi
 8002ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8002ecc:	6029      	str	r1, [r5, #0]
 8002ece:	bf48      	it	mi
 8002ed0:	6023      	strmi	r3, [r4, #0]
 8002ed2:	b91e      	cbnz	r6, 8002edc <_printf_i+0x1a4>
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	f023 0320 	bic.w	r3, r3, #32
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	2310      	movs	r3, #16
 8002ede:	e7a7      	b.n	8002e30 <_printf_i+0xf8>
 8002ee0:	4824      	ldr	r0, [pc, #144]	; (8002f74 <_printf_i+0x23c>)
 8002ee2:	e7e4      	b.n	8002eae <_printf_i+0x176>
 8002ee4:	4615      	mov	r5, r2
 8002ee6:	e7bd      	b.n	8002e64 <_printf_i+0x12c>
 8002ee8:	682b      	ldr	r3, [r5, #0]
 8002eea:	6826      	ldr	r6, [r4, #0]
 8002eec:	6961      	ldr	r1, [r4, #20]
 8002eee:	1d18      	adds	r0, r3, #4
 8002ef0:	6028      	str	r0, [r5, #0]
 8002ef2:	0635      	lsls	r5, r6, #24
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	d501      	bpl.n	8002efc <_printf_i+0x1c4>
 8002ef8:	6019      	str	r1, [r3, #0]
 8002efa:	e002      	b.n	8002f02 <_printf_i+0x1ca>
 8002efc:	0670      	lsls	r0, r6, #25
 8002efe:	d5fb      	bpl.n	8002ef8 <_printf_i+0x1c0>
 8002f00:	8019      	strh	r1, [r3, #0]
 8002f02:	2300      	movs	r3, #0
 8002f04:	6123      	str	r3, [r4, #16]
 8002f06:	4615      	mov	r5, r2
 8002f08:	e7bc      	b.n	8002e84 <_printf_i+0x14c>
 8002f0a:	682b      	ldr	r3, [r5, #0]
 8002f0c:	1d1a      	adds	r2, r3, #4
 8002f0e:	602a      	str	r2, [r5, #0]
 8002f10:	681d      	ldr	r5, [r3, #0]
 8002f12:	6862      	ldr	r2, [r4, #4]
 8002f14:	2100      	movs	r1, #0
 8002f16:	4628      	mov	r0, r5
 8002f18:	f7fd f96a 	bl	80001f0 <memchr>
 8002f1c:	b108      	cbz	r0, 8002f22 <_printf_i+0x1ea>
 8002f1e:	1b40      	subs	r0, r0, r5
 8002f20:	6060      	str	r0, [r4, #4]
 8002f22:	6863      	ldr	r3, [r4, #4]
 8002f24:	6123      	str	r3, [r4, #16]
 8002f26:	2300      	movs	r3, #0
 8002f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f2c:	e7aa      	b.n	8002e84 <_printf_i+0x14c>
 8002f2e:	6923      	ldr	r3, [r4, #16]
 8002f30:	462a      	mov	r2, r5
 8002f32:	4649      	mov	r1, r9
 8002f34:	4640      	mov	r0, r8
 8002f36:	47d0      	blx	sl
 8002f38:	3001      	adds	r0, #1
 8002f3a:	d0ad      	beq.n	8002e98 <_printf_i+0x160>
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	079b      	lsls	r3, r3, #30
 8002f40:	d413      	bmi.n	8002f6a <_printf_i+0x232>
 8002f42:	68e0      	ldr	r0, [r4, #12]
 8002f44:	9b03      	ldr	r3, [sp, #12]
 8002f46:	4298      	cmp	r0, r3
 8002f48:	bfb8      	it	lt
 8002f4a:	4618      	movlt	r0, r3
 8002f4c:	e7a6      	b.n	8002e9c <_printf_i+0x164>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	4632      	mov	r2, r6
 8002f52:	4649      	mov	r1, r9
 8002f54:	4640      	mov	r0, r8
 8002f56:	47d0      	blx	sl
 8002f58:	3001      	adds	r0, #1
 8002f5a:	d09d      	beq.n	8002e98 <_printf_i+0x160>
 8002f5c:	3501      	adds	r5, #1
 8002f5e:	68e3      	ldr	r3, [r4, #12]
 8002f60:	9903      	ldr	r1, [sp, #12]
 8002f62:	1a5b      	subs	r3, r3, r1
 8002f64:	42ab      	cmp	r3, r5
 8002f66:	dcf2      	bgt.n	8002f4e <_printf_i+0x216>
 8002f68:	e7eb      	b.n	8002f42 <_printf_i+0x20a>
 8002f6a:	2500      	movs	r5, #0
 8002f6c:	f104 0619 	add.w	r6, r4, #25
 8002f70:	e7f5      	b.n	8002f5e <_printf_i+0x226>
 8002f72:	bf00      	nop
 8002f74:	080030ed 	.word	0x080030ed
 8002f78:	080030fe 	.word	0x080030fe

08002f7c <memmove>:
 8002f7c:	4288      	cmp	r0, r1
 8002f7e:	b510      	push	{r4, lr}
 8002f80:	eb01 0402 	add.w	r4, r1, r2
 8002f84:	d902      	bls.n	8002f8c <memmove+0x10>
 8002f86:	4284      	cmp	r4, r0
 8002f88:	4623      	mov	r3, r4
 8002f8a:	d807      	bhi.n	8002f9c <memmove+0x20>
 8002f8c:	1e43      	subs	r3, r0, #1
 8002f8e:	42a1      	cmp	r1, r4
 8002f90:	d008      	beq.n	8002fa4 <memmove+0x28>
 8002f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f9a:	e7f8      	b.n	8002f8e <memmove+0x12>
 8002f9c:	4402      	add	r2, r0
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	428a      	cmp	r2, r1
 8002fa2:	d100      	bne.n	8002fa6 <memmove+0x2a>
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fae:	e7f7      	b.n	8002fa0 <memmove+0x24>

08002fb0 <_sbrk_r>:
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4d06      	ldr	r5, [pc, #24]	; (8002fcc <_sbrk_r+0x1c>)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	4608      	mov	r0, r1
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	f7fd fd8a 	bl	8000ad4 <_sbrk>
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	d102      	bne.n	8002fca <_sbrk_r+0x1a>
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	b103      	cbz	r3, 8002fca <_sbrk_r+0x1a>
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
 8002fcc:	20000230 	.word	0x20000230

08002fd0 <memcpy>:
 8002fd0:	440a      	add	r2, r1
 8002fd2:	4291      	cmp	r1, r2
 8002fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fd8:	d100      	bne.n	8002fdc <memcpy+0xc>
 8002fda:	4770      	bx	lr
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fe6:	4291      	cmp	r1, r2
 8002fe8:	d1f9      	bne.n	8002fde <memcpy+0xe>
 8002fea:	bd10      	pop	{r4, pc}

08002fec <_realloc_r>:
 8002fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff0:	4680      	mov	r8, r0
 8002ff2:	4614      	mov	r4, r2
 8002ff4:	460e      	mov	r6, r1
 8002ff6:	b921      	cbnz	r1, 8003002 <_realloc_r+0x16>
 8002ff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	f7ff bc49 	b.w	8002894 <_malloc_r>
 8003002:	b92a      	cbnz	r2, 8003010 <_realloc_r+0x24>
 8003004:	f7ff fbda 	bl	80027bc <_free_r>
 8003008:	4625      	mov	r5, r4
 800300a:	4628      	mov	r0, r5
 800300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003010:	f000 f81b 	bl	800304a <_malloc_usable_size_r>
 8003014:	4284      	cmp	r4, r0
 8003016:	4607      	mov	r7, r0
 8003018:	d802      	bhi.n	8003020 <_realloc_r+0x34>
 800301a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800301e:	d812      	bhi.n	8003046 <_realloc_r+0x5a>
 8003020:	4621      	mov	r1, r4
 8003022:	4640      	mov	r0, r8
 8003024:	f7ff fc36 	bl	8002894 <_malloc_r>
 8003028:	4605      	mov	r5, r0
 800302a:	2800      	cmp	r0, #0
 800302c:	d0ed      	beq.n	800300a <_realloc_r+0x1e>
 800302e:	42bc      	cmp	r4, r7
 8003030:	4622      	mov	r2, r4
 8003032:	4631      	mov	r1, r6
 8003034:	bf28      	it	cs
 8003036:	463a      	movcs	r2, r7
 8003038:	f7ff ffca 	bl	8002fd0 <memcpy>
 800303c:	4631      	mov	r1, r6
 800303e:	4640      	mov	r0, r8
 8003040:	f7ff fbbc 	bl	80027bc <_free_r>
 8003044:	e7e1      	b.n	800300a <_realloc_r+0x1e>
 8003046:	4635      	mov	r5, r6
 8003048:	e7df      	b.n	800300a <_realloc_r+0x1e>

0800304a <_malloc_usable_size_r>:
 800304a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800304e:	1f18      	subs	r0, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	bfbc      	itt	lt
 8003054:	580b      	ldrlt	r3, [r1, r0]
 8003056:	18c0      	addlt	r0, r0, r3
 8003058:	4770      	bx	lr
	...

0800305c <_init>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr

08003068 <_fini>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	bf00      	nop
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr
