
EXAMPLE_INTERRUPTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ca4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e80  08001e80  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e80  08001e80  00011e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e88  08001e88  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e88  08001e88  00011e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08001e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000003c  08001ecc  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001ecc  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004295  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010c8  00000000  00000000  00024301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  000253d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003e0  00000000  00000000  00025848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014da5  00000000  00000000  00025c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000570e  00000000  00000000  0003a9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081668  00000000  00000000  000400db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001020  00000000  00000000  000c1794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001e20 	.word	0x08001e20

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	08001e20 	.word	0x08001e20

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b08a      	sub	sp, #40	; 0x28
 80004ec:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	LCD = LCD_Create(LCD_PORT, LCD_PIN, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_ENA_GPIO_Port, LCD_ENA_Pin);
 80004ee:	4c3b      	ldr	r4, [pc, #236]	; (80005dc <main+0xf4>)
 80004f0:	4638      	mov	r0, r7
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	9302      	str	r3, [sp, #8]
 80004f6:	4b3a      	ldr	r3, [pc, #232]	; (80005e0 <main+0xf8>)
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2340      	movs	r3, #64	; 0x40
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	4b38      	ldr	r3, [pc, #224]	; (80005e0 <main+0xf8>)
 8000500:	4a38      	ldr	r2, [pc, #224]	; (80005e4 <main+0xfc>)
 8000502:	4939      	ldr	r1, [pc, #228]	; (80005e8 <main+0x100>)
 8000504:	f001 faa8 	bl	8001a58 <LCD_Create>
 8000508:	4625      	mov	r5, r4
 800050a:	463c      	mov	r4, r7
 800050c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000510:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000514:	e885 0003 	stmia.w	r5, {r0, r1}
	KEYPAD = KEYPAD_Create(KEYPAD_PORT, KEYPAD_PIN);
 8000518:	4c34      	ldr	r4, [pc, #208]	; (80005ec <main+0x104>)
 800051a:	463b      	mov	r3, r7
 800051c:	4a34      	ldr	r2, [pc, #208]	; (80005f0 <main+0x108>)
 800051e:	4935      	ldr	r1, [pc, #212]	; (80005f4 <main+0x10c>)
 8000520:	4618      	mov	r0, r3
 8000522:	f000 f97f 	bl	8000824 <KEYPAD_Create>
 8000526:	4622      	mov	r2, r4
 8000528:	463b      	mov	r3, r7
 800052a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800052e:	e882 0003 	stmia.w	r2, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 facf 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f869 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f8d1 	bl	80006e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&LCD);
 800053e:	4827      	ldr	r0, [pc, #156]	; (80005dc <main+0xf4>)
 8000540:	f001 faad 	bl	8001a9e <LCD_Init>
  LCD_Command(&LCD, ClearDisplay);
 8000544:	2101      	movs	r1, #1
 8000546:	4825      	ldr	r0, [pc, #148]	; (80005dc <main+0xf4>)
 8000548:	f001 fadd 	bl	8001b06 <LCD_Command>
  LCD_Command(&LCD, ReturnHome);
 800054c:	2102      	movs	r1, #2
 800054e:	4823      	ldr	r0, [pc, #140]	; (80005dc <main+0xf4>)
 8000550:	f001 fad9 	bl	8001b06 <LCD_Command>
  LCD_Gotoxy(&LCD, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	4820      	ldr	r0, [pc, #128]	; (80005dc <main+0xf4>)
 800055a:	f001 fc05 	bl	8001d68 <LCD_Gotoxy>
  LCD_String(&LCD, "....STM32-F401RE....");
 800055e:	4926      	ldr	r1, [pc, #152]	; (80005f8 <main+0x110>)
 8000560:	481e      	ldr	r0, [pc, #120]	; (80005dc <main+0xf4>)
 8000562:	f001 fbe2 	bl	8001d2a <LCD_String>
  LCD_Gotoxy(&LCD, 0, 1);
 8000566:	2201      	movs	r2, #1
 8000568:	2100      	movs	r1, #0
 800056a:	481c      	ldr	r0, [pc, #112]	; (80005dc <main+0xf4>)
 800056c:	f001 fbfc 	bl	8001d68 <LCD_Gotoxy>
  LCD_String(&LCD, "      *KEYPAD*");
 8000570:	4922      	ldr	r1, [pc, #136]	; (80005fc <main+0x114>)
 8000572:	481a      	ldr	r0, [pc, #104]	; (80005dc <main+0xf4>)
 8000574:	f001 fbd9 	bl	8001d2a <LCD_String>
  LCD_Gotoxy(&LCD, 0, 2);
 8000578:	2202      	movs	r2, #2
 800057a:	2100      	movs	r1, #0
 800057c:	4817      	ldr	r0, [pc, #92]	; (80005dc <main+0xf4>)
 800057e:	f001 fbf3 	bl	8001d68 <LCD_Gotoxy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  conta = 0;
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <main+0x118>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  FILA_SET(&KEYPAD, conta);
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <main+0x118>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	4816      	ldr	r0, [pc, #88]	; (80005ec <main+0x104>)
 8000592:	f000 f95f 	bl	8000854 <FILA_SET>
	  HAL_Delay(25);
 8000596:	2019      	movs	r0, #25
 8000598:	f000 fb0e 	bl	8000bb8 <HAL_Delay>
	  conta++;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <main+0x118>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	3301      	adds	r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <main+0x118>)
 80005a8:	701a      	strb	r2, [r3, #0]
	  if(conta>=4){
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <main+0x118>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d902      	bls.n	80005ba <main+0xd2>
		  conta = 0;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <main+0x118>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	  }
	  if(flag){
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <main+0x11c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0e1      	beq.n	8000588 <main+0xa0>
		  LCD_Character(&LCD, KEY);
 80005c4:	4b10      	ldr	r3, [pc, #64]	; (8000608 <main+0x120>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <main+0xf4>)
 80005ce:	f001 fb23 	bl	8001c18 <LCD_Character>
		  flag = false;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <main+0x11c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
	  FILA_SET(&KEYPAD, conta);
 80005d8:	e7d6      	b.n	8000588 <main+0xa0>
 80005da:	bf00      	nop
 80005dc:	20000058 	.word	0x20000058
 80005e0:	40020800 	.word	0x40020800
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000008 	.word	0x20000008
 80005ec:	20000070 	.word	0x20000070
 80005f0:	20000028 	.word	0x20000028
 80005f4:	20000018 	.word	0x20000018
 80005f8:	08001e38 	.word	0x08001e38
 80005fc:	08001e50 	.word	0x08001e50
 8000600:	20000078 	.word	0x20000078
 8000604:	2000007a 	.word	0x2000007a
 8000608:	20000079 	.word	0x20000079

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fbf8 	bl	8001e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000658:	4a20      	ldr	r2, [pc, #128]	; (80006dc <SystemClock_Config+0xd0>)
 800065a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000684:	2354      	movs	r3, #84	; 0x54
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fd7b 	bl	8001190 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a0:	f000 f968 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2102      	movs	r1, #2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 ffdd 	bl	8001680 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006cc:	f000 f952 	bl	8000974 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b47      	ldr	r3, [pc, #284]	; (8000818 <MX_GPIO_Init+0x138>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a46      	ldr	r2, [pc, #280]	; (8000818 <MX_GPIO_Init+0x138>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b44      	ldr	r3, [pc, #272]	; (8000818 <MX_GPIO_Init+0x138>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b40      	ldr	r3, [pc, #256]	; (8000818 <MX_GPIO_Init+0x138>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3f      	ldr	r2, [pc, #252]	; (8000818 <MX_GPIO_Init+0x138>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <MX_GPIO_Init+0x138>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <MX_GPIO_Init+0x138>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a38      	ldr	r2, [pc, #224]	; (8000818 <MX_GPIO_Init+0x138>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <MX_GPIO_Init+0x138>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b32      	ldr	r3, [pc, #200]	; (8000818 <MX_GPIO_Init+0x138>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a31      	ldr	r2, [pc, #196]	; (8000818 <MX_GPIO_Init+0x138>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <MX_GPIO_Init+0x138>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FIL_0_Pin|FIL_1_Pin|FIL_2_Pin|FIL_3_Pin
 8000766:	2200      	movs	r2, #0
 8000768:	21cf      	movs	r1, #207	; 0xcf
 800076a:	482c      	ldr	r0, [pc, #176]	; (800081c <MX_GPIO_Init+0x13c>)
 800076c:	f000 fcde 	bl	800112c <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_ENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000776:	482a      	ldr	r0, [pc, #168]	; (8000820 <MX_GPIO_Init+0x140>)
 8000778:	f000 fcd8 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FIL_0_Pin FIL_1_Pin FIL_2_Pin FIL_3_Pin
                           LCD_RS_Pin LCD_ENA_Pin */
  GPIO_InitStruct.Pin = FIL_0_Pin|FIL_1_Pin|FIL_2_Pin|FIL_3_Pin
 800077c:	23cf      	movs	r3, #207	; 0xcf
 800077e:	617b      	str	r3, [r7, #20]
                          |LCD_RS_Pin|LCD_ENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	4822      	ldr	r0, [pc, #136]	; (800081c <MX_GPIO_Init+0x13c>)
 8000794:	f000 fb46 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_0_Pin COL_1_Pin COL_2_Pin COL_3_Pin */
  GPIO_InitStruct.Pin = COL_0_Pin|COL_1_Pin|COL_2_Pin|COL_3_Pin;
 8000798:	230f      	movs	r3, #15
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	481c      	ldr	r0, [pc, #112]	; (8000820 <MX_GPIO_Init+0x140>)
 80007ae:	f000 fb39 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 80007b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4815      	ldr	r0, [pc, #84]	; (8000820 <MX_GPIO_Init+0x140>)
 80007cc:	f000 fb2a 	bl	8000e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	2006      	movs	r0, #6
 80007d6:	f000 faee 	bl	8000db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007da:	2006      	movs	r0, #6
 80007dc:	f000 fb07 	bl	8000dee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2102      	movs	r1, #2
 80007e4:	2007      	movs	r0, #7
 80007e6:	f000 fae6 	bl	8000db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007ea:	2007      	movs	r0, #7
 80007ec:	f000 faff 	bl	8000dee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2103      	movs	r1, #3
 80007f4:	2008      	movs	r0, #8
 80007f6:	f000 fade 	bl	8000db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007fa:	2008      	movs	r0, #8
 80007fc:	f000 faf7 	bl	8000dee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 4, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2104      	movs	r1, #4
 8000804:	2009      	movs	r0, #9
 8000806:	f000 fad6 	bl	8000db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800080a:	2009      	movs	r0, #9
 800080c:	f000 faef 	bl	8000dee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020800 	.word	0x40020800
 8000820:	40020400 	.word	0x40020400

08000824 <KEYPAD_Create>:

/* USER CODE BEGIN 4 */

KEYPAD_Struct_t KEYPAD_Create(KEYPAD_PortType port[], KEYPAD_PinType pin[]){
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
	KEYPAD_Struct_t KEYPAD;

	KEYPAD.dataport = port;
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	613b      	str	r3, [r7, #16]
	KEYPAD.datapin = pin;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	617b      	str	r3, [r7, #20]

	return KEYPAD;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	461a      	mov	r2, r3
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000844:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	371c      	adds	r7, #28
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <FILA_SET>:
void FILA_SET(KEYPAD_Struct_t *KEYPAD, uint8_t valor){
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
	uint8_t conta, val;

	val = 1<<valor;
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2201      	movs	r2, #1
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	73bb      	strb	r3, [r7, #14]
	for(conta=0; conta < 4; conta++){
 800086a:	2300      	movs	r3, #0
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	e019      	b.n	80008a4 <FILA_SET+0x50>
		HAL_GPIO_WritePin(KEYPAD->dataport[conta], KEYPAD->datapin[conta], (val>>conta)&0x01);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	8819      	ldrh	r1, [r3, #0]
 8000888:	7bba      	ldrb	r2, [r7, #14]
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	fa42 f303 	asr.w	r3, r2, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	f000 fc47 	bl	800112c <HAL_GPIO_WritePin>
	for(conta=0; conta < 4; conta++){
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	3301      	adds	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d9e2      	bls.n	8000870 <FILA_SET+0x1c>
	}
	return;
 80008aa:	bf00      	nop
}
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008b4:	b490      	push	{r4, r7}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
	char keys[4][4] = {{'7', '8', '9', '/'},
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <HAL_GPIO_EXTI_Callback+0xb0>)
 80008c0:	f107 0408 	add.w	r4, r7, #8
 80008c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{'4', '5', '6', '*'},
			{'1', '2', '3', '-'},
			{'N', '0', '=', '+'}};

	switch (GPIO_Pin) {
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	d83e      	bhi.n	8000950 <HAL_GPIO_EXTI_Callback+0x9c>
 80008d2:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <HAL_GPIO_EXTI_Callback+0x24>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	080008f9 	.word	0x080008f9
 80008dc:	0800090f 	.word	0x0800090f
 80008e0:	08000951 	.word	0x08000951
 80008e4:	08000925 	.word	0x08000925
 80008e8:	08000951 	.word	0x08000951
 80008ec:	08000951 	.word	0x08000951
 80008f0:	08000951 	.word	0x08000951
 80008f4:	0800093b 	.word	0x0800093b
	case COL_0_Pin:
		KEY = keys[conta][0];
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <HAL_GPIO_EXTI_Callback+0xb4>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	3318      	adds	r3, #24
 8000902:	443b      	add	r3, r7
 8000904:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <HAL_GPIO_EXTI_Callback+0xb8>)
 800090a:	701a      	strb	r2, [r3, #0]
		break;
 800090c:	e021      	b.n	8000952 <HAL_GPIO_EXTI_Callback+0x9e>
	case COL_1_Pin:
		KEY = keys[conta][1];
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	3318      	adds	r3, #24
 8000918:	443b      	add	r3, r7
 800091a:	f813 2c0f 	ldrb.w	r2, [r3, #-15]
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000920:	701a      	strb	r2, [r3, #0]
		break;
 8000922:	e016      	b.n	8000952 <HAL_GPIO_EXTI_Callback+0x9e>
	case COL_2_Pin:
		KEY = keys[conta][2];
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	3318      	adds	r3, #24
 800092e:	443b      	add	r3, r7
 8000930:	f813 2c0e 	ldrb.w	r2, [r3, #-14]
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_GPIO_EXTI_Callback+0xb8>)
 8000936:	701a      	strb	r2, [r3, #0]
		break;
 8000938:	e00b      	b.n	8000952 <HAL_GPIO_EXTI_Callback+0x9e>
	case COL_3_Pin:
		KEY = keys[conta][3];
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_GPIO_EXTI_Callback+0xb4>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	3318      	adds	r3, #24
 8000944:	443b      	add	r3, r7
 8000946:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_GPIO_EXTI_Callback+0xb8>)
 800094c:	701a      	strb	r2, [r3, #0]
		break;
 800094e:	e000      	b.n	8000952 <HAL_GPIO_EXTI_Callback+0x9e>
	default:
		break;
 8000950:	bf00      	nop
	}
	flag = true;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bc90      	pop	{r4, r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	08001e60 	.word	0x08001e60
 8000968:	20000078 	.word	0x20000078
 800096c:	20000079 	.word	0x20000079
 8000970:	2000007a 	.word	0x2000007a

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f8ac 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_0_Pin);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 fb99 	bl	8001160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 8000a36:	2002      	movs	r0, #2
 8000a38:	f000 fb92 	bl	8001160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 8000a44:	2004      	movs	r0, #4
 8000a46:	f000 fb8b 	bl	8001160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 8000a52:	2008      	movs	r0, #8
 8000a54:	f000 fb84 	bl	8001160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a86:	490e      	ldr	r1, [pc, #56]	; (8000ac0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a88:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a9c:	4c0b      	ldr	r4, [pc, #44]	; (8000acc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aaa:	f7ff ffd7 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f001 f98b 	bl	8001dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fd19 	bl	80004e8 <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000ac4:	08001e90 	.word	0x08001e90
  ldr r2, =_sbss
 8000ac8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000acc:	20000080 	.word	0x20000080

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <HAL_Init+0x40>)
 8000ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_Init+0x40>)
 8000aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_Init+0x40>)
 8000af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 f94f 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f808 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b08:	f7ff ff3a 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023c00 	.word	0x40023c00

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x54>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x58>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f967 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00e      	b.n	8000b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d80a      	bhi.n	8000b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f92f 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <HAL_InitTick+0x5c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000030 	.word	0x20000030
 8000b70:	20000038 	.word	0x20000038
 8000b74:	20000034 	.word	0x20000034

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000038 	.word	0x20000038
 8000b9c:	2000007c 	.word	0x2000007c

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2000007c 	.word	0x2000007c

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff ffee 	bl	8000ba0 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_Delay+0x44>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bde:	bf00      	nop
 8000be0:	f7ff ffde 	bl	8000ba0 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000038 	.word	0x20000038

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff29 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff3e 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff8e 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff31 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffa2 	bl	8000d5c <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e159      	b.n	80010f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 8148 	bne.w	80010ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d130      	bne.n	8000ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d017      	beq.n	8000f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80a2 	beq.w	80010ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b57      	ldr	r3, [pc, #348]	; (800110c <HAL_GPIO_Init+0x2e8>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a56      	ldr	r2, [pc, #344]	; (800110c <HAL_GPIO_Init+0x2e8>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b54      	ldr	r3, [pc, #336]	; (800110c <HAL_GPIO_Init+0x2e8>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	4a52      	ldr	r2, [pc, #328]	; (8001110 <HAL_GPIO_Init+0x2ec>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a49      	ldr	r2, [pc, #292]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d019      	beq.n	8001026 <HAL_GPIO_Init+0x202>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a48      	ldr	r2, [pc, #288]	; (8001118 <HAL_GPIO_Init+0x2f4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d013      	beq.n	8001022 <HAL_GPIO_Init+0x1fe>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a47      	ldr	r2, [pc, #284]	; (800111c <HAL_GPIO_Init+0x2f8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00d      	beq.n	800101e <HAL_GPIO_Init+0x1fa>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a46      	ldr	r2, [pc, #280]	; (8001120 <HAL_GPIO_Init+0x2fc>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d007      	beq.n	800101a <HAL_GPIO_Init+0x1f6>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a45      	ldr	r2, [pc, #276]	; (8001124 <HAL_GPIO_Init+0x300>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_GPIO_Init+0x1f2>
 8001012:	2304      	movs	r3, #4
 8001014:	e008      	b.n	8001028 <HAL_GPIO_Init+0x204>
 8001016:	2307      	movs	r3, #7
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x204>
 800101a:	2303      	movs	r3, #3
 800101c:	e004      	b.n	8001028 <HAL_GPIO_Init+0x204>
 800101e:	2302      	movs	r3, #2
 8001020:	e002      	b.n	8001028 <HAL_GPIO_Init+0x204>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_GPIO_Init+0x204>
 8001026:	2300      	movs	r3, #0
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4093      	lsls	r3, r2
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001038:	4935      	ldr	r1, [pc, #212]	; (8001110 <HAL_GPIO_Init+0x2ec>)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <HAL_GPIO_Init+0x304>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106a:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <HAL_GPIO_Init+0x304>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_GPIO_Init+0x304>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001094:	4a24      	ldr	r2, [pc, #144]	; (8001128 <HAL_GPIO_Init+0x304>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_GPIO_Init+0x304>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010be:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <HAL_GPIO_Init+0x304>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_GPIO_Init+0x304>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <HAL_GPIO_Init+0x304>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3301      	adds	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	f67f aea2 	bls.w	8000e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	40013800 	.word	0x40013800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400
 800111c:	40020800 	.word	0x40020800
 8001120:	40020c00 	.word	0x40020c00
 8001124:	40021000 	.word	0x40021000
 8001128:	40013c00 	.word	0x40013c00

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001148:	e003      	b.n	8001152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	619a      	str	r2, [r3, #24]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fb98 	bl	80008b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40013c00 	.word	0x40013c00

08001190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e267      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d075      	beq.n	800129a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ae:	4b88      	ldr	r3, [pc, #544]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d00c      	beq.n	80011d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ba:	4b85      	ldr	r3, [pc, #532]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d112      	bne.n	80011ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c6:	4b82      	ldr	r3, [pc, #520]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011d2:	d10b      	bne.n	80011ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	4b7e      	ldr	r3, [pc, #504]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d05b      	beq.n	8001298 <HAL_RCC_OscConfig+0x108>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d157      	bne.n	8001298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e242      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f4:	d106      	bne.n	8001204 <HAL_RCC_OscConfig+0x74>
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a75      	ldr	r2, [pc, #468]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e01d      	b.n	8001240 <HAL_RCC_OscConfig+0xb0>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x98>
 800120e:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6f      	ldr	r2, [pc, #444]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a6c      	ldr	r2, [pc, #432]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e00b      	b.n	8001240 <HAL_RCC_OscConfig+0xb0>
 8001228:	4b69      	ldr	r3, [pc, #420]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a68      	ldr	r2, [pc, #416]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800122e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b66      	ldr	r3, [pc, #408]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d013      	beq.n	8001270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fcaa 	bl	8000ba0 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fca6 	bl	8000ba0 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e207      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b5b      	ldr	r3, [pc, #364]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0xc0>
 800126e:	e014      	b.n	800129a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fc96 	bl	8000ba0 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fc92 	bl	8000ba0 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e1f3      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0xe8>
 8001296:	e000      	b.n	800129a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d063      	beq.n	800136e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a6:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00b      	beq.n	80012ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d11c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d116      	bne.n	80012f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <HAL_RCC_OscConfig+0x152>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e1c7      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e2:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4937      	ldr	r1, [pc, #220]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f6:	e03a      	b.n	800136e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001300:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_RCC_OscConfig+0x244>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff fc4b 	bl	8000ba0 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fc47 	bl	8000ba0 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e1a8      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4925      	ldr	r1, [pc, #148]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
 8001340:	e015      	b.n	800136e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_RCC_OscConfig+0x244>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fc2a 	bl	8000ba0 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fc26 	bl	8000ba0 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e187      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d036      	beq.n	80013e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d016      	beq.n	80013b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_RCC_OscConfig+0x248>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001388:	f7ff fc0a 	bl	8000ba0 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff fc06 	bl	8000ba0 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e167      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80013a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x200>
 80013ae:	e01b      	b.n	80013e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_RCC_OscConfig+0x248>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fbf3 	bl	8000ba0 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	e00e      	b.n	80013dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013be:	f7ff fbef 	bl	8000ba0 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d907      	bls.n	80013dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e150      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
 80013d0:	40023800 	.word	0x40023800
 80013d4:	42470000 	.word	0x42470000
 80013d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	4b88      	ldr	r3, [pc, #544]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ea      	bne.n	80013be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 8097 	beq.w	8001524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fa:	4b81      	ldr	r3, [pc, #516]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b7d      	ldr	r3, [pc, #500]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a7c      	ldr	r2, [pc, #496]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b7a      	ldr	r3, [pc, #488]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001422:	2301      	movs	r3, #1
 8001424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001426:	4b77      	ldr	r3, [pc, #476]	; (8001604 <HAL_RCC_OscConfig+0x474>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d118      	bne.n	8001464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001432:	4b74      	ldr	r3, [pc, #464]	; (8001604 <HAL_RCC_OscConfig+0x474>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a73      	ldr	r2, [pc, #460]	; (8001604 <HAL_RCC_OscConfig+0x474>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143e:	f7ff fbaf 	bl	8000ba0 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001446:	f7ff fbab 	bl	8000ba0 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e10c      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001458:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <HAL_RCC_OscConfig+0x474>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x2ea>
 800146c:	4b64      	ldr	r3, [pc, #400]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	4a63      	ldr	r2, [pc, #396]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6713      	str	r3, [r2, #112]	; 0x70
 8001478:	e01c      	b.n	80014b4 <HAL_RCC_OscConfig+0x324>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x30c>
 8001482:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a5e      	ldr	r2, [pc, #376]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	4a5b      	ldr	r2, [pc, #364]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6713      	str	r3, [r2, #112]	; 0x70
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0x324>
 800149c:	4b58      	ldr	r3, [pc, #352]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a57      	ldr	r2, [pc, #348]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
 80014a8:	4b55      	ldr	r3, [pc, #340]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	4a54      	ldr	r2, [pc, #336]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80014ae:	f023 0304 	bic.w	r3, r3, #4
 80014b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d015      	beq.n	80014e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fb70 	bl	8000ba0 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c4:	f7ff fb6c 	bl	8000ba0 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e0cb      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014da:	4b49      	ldr	r3, [pc, #292]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0ee      	beq.n	80014c4 <HAL_RCC_OscConfig+0x334>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fb5a 	bl	8000ba0 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f7ff fb56 	bl	8000ba0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e0b5      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001506:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ee      	bne.n	80014f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a38      	ldr	r2, [pc, #224]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a1 	beq.w	8001670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b08      	cmp	r3, #8
 8001538:	d05c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d141      	bne.n	80015c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_RCC_OscConfig+0x478>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fb2a 	bl	8000ba0 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff fb26 	bl	8000ba0 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e087      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001562:	4b27      	ldr	r3, [pc, #156]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69da      	ldr	r2, [r3, #28]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	019b      	lsls	r3, r3, #6
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	3b01      	subs	r3, #1
 8001588:	041b      	lsls	r3, r3, #16
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	061b      	lsls	r3, r3, #24
 8001592:	491b      	ldr	r1, [pc, #108]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_RCC_OscConfig+0x478>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff faff 	bl	8000ba0 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff fafb 	bl	8000ba0 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e05c      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x416>
 80015c4:	e054      	b.n	8001670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_RCC_OscConfig+0x478>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fae8 	bl	8000ba0 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff fae4 	bl	8000ba0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e045      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x444>
 80015f2:	e03d      	b.n	8001670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d107      	bne.n	800160c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e038      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000
 8001608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_RCC_OscConfig+0x4ec>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d028      	beq.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d121      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d11a      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800163c:	4013      	ands	r3, r2
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001644:	4293      	cmp	r3, r2
 8001646:	d111      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	3b01      	subs	r3, #1
 8001656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0cc      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d90c      	bls.n	80016bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b65      	ldr	r3, [pc, #404]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b63      	ldr	r3, [pc, #396]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b8      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b59      	ldr	r3, [pc, #356]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a58      	ldr	r2, [pc, #352]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ec:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a52      	ldr	r2, [pc, #328]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b50      	ldr	r3, [pc, #320]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	494d      	ldr	r1, [pc, #308]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d044      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d119      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d003      	beq.n	800173e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173a:	2b03      	cmp	r3, #3
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e06f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e067      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4934      	ldr	r1, [pc, #208]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fa16 	bl	8000ba0 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff fa12 	bl	8000ba0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e04f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e032      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	490e      	ldr	r1, [pc, #56]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001806:	f000 f821 	bl	800184c <HAL_RCC_GetSysClockFreq>
 800180a:	4602      	mov	r2, r0
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	490a      	ldr	r1, [pc, #40]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f976 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00
 800183c:	40023800 	.word	0x40023800
 8001840:	08001e70 	.word	0x08001e70
 8001844:	20000030 	.word	0x20000030
 8001848:	20000034 	.word	0x20000034

0800184c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001850:	b094      	sub	sp, #80	; 0x50
 8001852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
 8001858:	2300      	movs	r3, #0
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800185c:	2300      	movs	r3, #0
 800185e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001864:	4b79      	ldr	r3, [pc, #484]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b08      	cmp	r3, #8
 800186e:	d00d      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x40>
 8001870:	2b08      	cmp	r3, #8
 8001872:	f200 80e1 	bhi.w	8001a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x34>
 800187a:	2b04      	cmp	r3, #4
 800187c:	d003      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x3a>
 800187e:	e0db      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001880:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001882:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001884:	e0db      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001886:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800188a:	e0d8      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800188c:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001894:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001896:	4b6d      	ldr	r3, [pc, #436]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a2:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	2200      	movs	r2, #0
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80018ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
 80018ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018be:	4622      	mov	r2, r4
 80018c0:	462b      	mov	r3, r5
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	0159      	lsls	r1, r3, #5
 80018cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d0:	0150      	lsls	r0, r2, #5
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4621      	mov	r1, r4
 80018d8:	1a51      	subs	r1, r2, r1
 80018da:	6139      	str	r1, [r7, #16]
 80018dc:	4629      	mov	r1, r5
 80018de:	eb63 0301 	sbc.w	r3, r3, r1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018f0:	4659      	mov	r1, fp
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4651      	mov	r1, sl
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4651      	mov	r1, sl
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4651      	mov	r1, sl
 8001900:	ebb2 0801 	subs.w	r8, r2, r1
 8001904:	4659      	mov	r1, fp
 8001906:	eb63 0901 	sbc.w	r9, r3, r1
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800191a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800191e:	4690      	mov	r8, r2
 8001920:	4699      	mov	r9, r3
 8001922:	4623      	mov	r3, r4
 8001924:	eb18 0303 	adds.w	r3, r8, r3
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	462b      	mov	r3, r5
 800192c:	eb49 0303 	adc.w	r3, r9, r3
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800193e:	4629      	mov	r1, r5
 8001940:	024b      	lsls	r3, r1, #9
 8001942:	4621      	mov	r1, r4
 8001944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001948:	4621      	mov	r1, r4
 800194a:	024a      	lsls	r2, r1, #9
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001952:	2200      	movs	r2, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
 8001956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800195c:	f7fe fc42 	bl	80001e4 <__aeabi_uldivmod>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4613      	mov	r3, r2
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001968:	e058      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196a:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	099b      	lsrs	r3, r3, #6
 8001970:	2200      	movs	r2, #0
 8001972:	4618      	mov	r0, r3
 8001974:	4611      	mov	r1, r2
 8001976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
 8001980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001984:	4642      	mov	r2, r8
 8001986:	464b      	mov	r3, r9
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	0159      	lsls	r1, r3, #5
 8001992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001996:	0150      	lsls	r0, r2, #5
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4641      	mov	r1, r8
 800199e:	ebb2 0a01 	subs.w	sl, r2, r1
 80019a2:	4649      	mov	r1, r9
 80019a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019bc:	ebb2 040a 	subs.w	r4, r2, sl
 80019c0:	eb63 050b 	sbc.w	r5, r3, fp
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	00eb      	lsls	r3, r5, #3
 80019ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019d2:	00e2      	lsls	r2, r4, #3
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
 80019d8:	4643      	mov	r3, r8
 80019da:	18e3      	adds	r3, r4, r3
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	464b      	mov	r3, r9
 80019e0:	eb45 0303 	adc.w	r3, r5, r3
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019f2:	4629      	mov	r1, r5
 80019f4:	028b      	lsls	r3, r1, #10
 80019f6:	4621      	mov	r1, r4
 80019f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019fc:	4621      	mov	r1, r4
 80019fe:	028a      	lsls	r2, r1, #10
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a06:	2200      	movs	r2, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	61fa      	str	r2, [r7, #28]
 8001a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a10:	f7fe fbe8 	bl	80001e4 <__aeabi_uldivmod>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	3301      	adds	r3, #1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a36:	e002      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3750      	adds	r7, #80	; 0x50
 8001a44:	46bd      	mov	sp, r7
 8001a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	007a1200 	.word	0x007a1200

08001a58 <LCD_Create>:
#include "LCD_Library.h"


LCD_Struct_t LCD_Create(LCD_PortType port[], LCD_PinType pin[],
		LCD_PortType portRS, LCD_PinType pinRS,
		LCD_PortType portENA, LCD_PinType pinENA){
 8001a58:	b4b0      	push	{r4, r5, r7}
 8001a5a:	b08b      	sub	sp, #44	; 0x2c
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]

	LCD_Struct_t LCD;

	LCD.dataport = port;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	613b      	str	r3, [r7, #16]
	LCD.datapin = pin;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	617b      	str	r3, [r7, #20]
	LCD.RS_port = portRS;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	61bb      	str	r3, [r7, #24]
	LCD.RS_pin = pinRS;
 8001a72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a74:	83bb      	strh	r3, [r7, #28]
	LCD.ENA_port = portENA;
 8001a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a78:	623b      	str	r3, [r7, #32]
	LCD.ENA_pin = pinENA;
 8001a7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a7e:	84bb      	strh	r3, [r7, #36]	; 0x24

	return LCD;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	461d      	mov	r5, r3
 8001a84:	f107 0410 	add.w	r4, r7, #16
 8001a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a90:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	372c      	adds	r7, #44	; 0x2c
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bcb0      	pop	{r4, r5, r7}
 8001a9c:	4770      	bx	lr

08001a9e <LCD_Init>:


void LCD_Init(LCD_Struct_t *LCD){
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]

	HAL_Delay(20);
 8001aa6:	2014      	movs	r0, #20
 8001aa8:	f7ff f886 	bl	8000bb8 <HAL_Delay>
	LCD_Command(LCD, 0x30);
 8001aac:	2130      	movs	r1, #48	; 0x30
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f829 	bl	8001b06 <LCD_Command>
	HAL_Delay(5);
 8001ab4:	2005      	movs	r0, #5
 8001ab6:	f7ff f87f 	bl	8000bb8 <HAL_Delay>
	LCD_Command(LCD, 0x30);
 8001aba:	2130      	movs	r1, #48	; 0x30
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f822 	bl	8001b06 <LCD_Command>
	HAL_Delay(1);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f7ff f878 	bl	8000bb8 <HAL_Delay>
	LCD_Command(LCD, 0x30);
 8001ac8:	2130      	movs	r1, #48	; 0x30
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f81b 	bl	8001b06 <LCD_Command>
	HAL_Delay(1);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff f871 	bl	8000bb8 <HAL_Delay>

	LCD_Command(LCD, 0x32);
 8001ad6:	2132      	movs	r1, #50	; 0x32
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f814 	bl	8001b06 <LCD_Command>
	LCD_Command(LCD, 0x28);
 8001ade:	2128      	movs	r1, #40	; 0x28
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f810 	bl	8001b06 <LCD_Command>
	LCD_Command(LCD, 0x0C);
 8001ae6:	210c      	movs	r1, #12
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f80c 	bl	8001b06 <LCD_Command>
	LCD_Command(LCD, 0x01);
 8001aee:	2101      	movs	r1, #1
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f808 	bl	8001b06 <LCD_Command>
	LCD_Command(LCD, 0x06);
 8001af6:	2106      	movs	r1, #6
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f804 	bl	8001b06 <LCD_Command>

	return;
 8001afe:	bf00      	nop
}
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <LCD_Command>:

void LCD_Command(LCD_Struct_t *LCD, uint8_t command){
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73bb      	strb	r3, [r7, #14]
	uint8_t j;

	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6918      	ldr	r0, [r3, #16]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	8a9b      	ldrh	r3, [r3, #20]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff fb03 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->RS_port, LCD->RS_pin, RESET);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6898      	ldr	r0, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	899b      	ldrh	r3, [r3, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff fafb 	bl	800112c <HAL_GPIO_WritePin>

	cmd = (command>>4)&0x0F;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	73bb      	strb	r3, [r7, #14]
	for(j=0; j<4; j++){
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e019      	b.n	8001b76 <LCD_Command+0x70>
		HAL_GPIO_WritePin(LCD->dataport[j], LCD->datapin[j], (cmd>>j)&0x01);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	8819      	ldrh	r1, [r3, #0]
 8001b5a:	7bba      	ldrb	r2, [r7, #14]
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	fa42 f303 	asr.w	r3, r2, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f7ff fade 	bl	800112c <HAL_GPIO_WritePin>
	for(j=0; j<4; j++){
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	3301      	adds	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d9e2      	bls.n	8001b42 <LCD_Command+0x3c>
	}
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, SET);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6918      	ldr	r0, [r3, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	8a9b      	ldrh	r3, [r3, #20]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7ff fad0 	bl	800112c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff f813 	bl	8000bb8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6918      	ldr	r0, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	8a9b      	ldrh	r3, [r3, #20]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff fac5 	bl	800112c <HAL_GPIO_WritePin>

	cmd = (command)&0x0F;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	73bb      	strb	r3, [r7, #14]
	for(j=0; j<4; j++){
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e019      	b.n	8001be4 <LCD_Command+0xde>
		HAL_GPIO_WritePin(LCD->dataport[j], LCD->datapin[j], (cmd>>j)&0x01);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	8819      	ldrh	r1, [r3, #0]
 8001bc8:	7bba      	ldrb	r2, [r7, #14]
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	fa42 f303 	asr.w	r3, r2, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f7ff faa7 	bl	800112c <HAL_GPIO_WritePin>
	for(j=0; j<4; j++){
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	3301      	adds	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d9e2      	bls.n	8001bb0 <LCD_Command+0xaa>
	}
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, SET);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6918      	ldr	r0, [r3, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	8a9b      	ldrh	r3, [r3, #20]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7ff fa99 	bl	800112c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7fe ffdc 	bl	8000bb8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6918      	ldr	r0, [r3, #16]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	8a9b      	ldrh	r3, [r3, #20]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7ff fa8e 	bl	800112c <HAL_GPIO_WritePin>

	return;
 8001c10:	bf00      	nop
}
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <LCD_Character>:
void LCD_Character(LCD_Struct_t *LCD, char data){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
	uint8_t dat = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73bb      	strb	r3, [r7, #14]
	uint8_t j;

	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6918      	ldr	r0, [r3, #16]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	8a9b      	ldrh	r3, [r3, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7ff fa7a 	bl	800112c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->RS_port, LCD->RS_pin, SET);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6898      	ldr	r0, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	899b      	ldrh	r3, [r3, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4619      	mov	r1, r3
 8001c44:	f7ff fa72 	bl	800112c <HAL_GPIO_WritePin>

	dat = (data>>4)&0x0F;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	73bb      	strb	r3, [r7, #14]
	for(j=0; j<4; j++){
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e019      	b.n	8001c88 <LCD_Character+0x70>
		HAL_GPIO_WritePin(LCD->dataport[j], LCD->datapin[j], (dat>>j)&0x01);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	8819      	ldrh	r1, [r3, #0]
 8001c6c:	7bba      	ldrb	r2, [r7, #14]
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	fa42 f303 	asr.w	r3, r2, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f7ff fa55 	bl	800112c <HAL_GPIO_WritePin>
	for(j=0; j<4; j++){
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	3301      	adds	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d9e2      	bls.n	8001c54 <LCD_Character+0x3c>
	}
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, SET);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6918      	ldr	r0, [r3, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	8a9b      	ldrh	r3, [r3, #20]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f7ff fa47 	bl	800112c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7fe ff8a 	bl	8000bb8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6918      	ldr	r0, [r3, #16]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	8a9b      	ldrh	r3, [r3, #20]
 8001cac:	2200      	movs	r2, #0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7ff fa3c 	bl	800112c <HAL_GPIO_WritePin>

	dat = (data)&0x0F;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	73bb      	strb	r3, [r7, #14]
	for(j=0; j<4; j++){
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	e019      	b.n	8001cf6 <LCD_Character+0xde>
		HAL_GPIO_WritePin(LCD->dataport[j], LCD->datapin[j], (dat>>j)&0x01);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	8819      	ldrh	r1, [r3, #0]
 8001cda:	7bba      	ldrb	r2, [r7, #14]
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	fa42 f303 	asr.w	r3, r2, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	f7ff fa1e 	bl	800112c <HAL_GPIO_WritePin>
	for(j=0; j<4; j++){
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d9e2      	bls.n	8001cc2 <LCD_Character+0xaa>
	}
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, SET);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6918      	ldr	r0, [r3, #16]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	8a9b      	ldrh	r3, [r3, #20]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7ff fa10 	bl	800112c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7fe ff53 	bl	8000bb8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD->ENA_port, LCD->ENA_pin, RESET);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6918      	ldr	r0, [r3, #16]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	8a9b      	ldrh	r3, [r3, #20]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7ff fa05 	bl	800112c <HAL_GPIO_WritePin>

	return;
 8001d22:	bf00      	nop
}
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <LCD_String>:

void LCD_String(LCD_Struct_t *LCD, char *str){
 8001d2a:	b590      	push	{r4, r7, lr}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
	uint8_t j;

	for(j=0; j<strlen(str); j++){
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e00a      	b.n	8001d50 <LCD_String+0x26>
		LCD_Character(LCD, str[j]);
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff67 	bl	8001c18 <LCD_Character>
	for(j=0; j<strlen(str); j++){
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	7bfc      	ldrb	r4, [r7, #15]
 8001d52:	6838      	ldr	r0, [r7, #0]
 8001d54:	f7fe fa3e 	bl	80001d4 <strlen>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	429c      	cmp	r4, r3
 8001d5c:	d3ed      	bcc.n	8001d3a <LCD_String+0x10>
	}

	return;
 8001d5e:	bf00      	nop
}
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
	...

08001d68 <LCD_Gotoxy>:
void LCD_Gotoxy(LCD_Struct_t *LCD, uint8_t x, uint8_t y){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
 8001d74:	4613      	mov	r3, r2
 8001d76:	70bb      	strb	r3, [r7, #2]
	uint8_t conta_address;

	switch (y) {
 8001d78:	78bb      	ldrb	r3, [r7, #2]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d816      	bhi.n	8001dac <LCD_Gotoxy+0x44>
 8001d7e:	a201      	add	r2, pc, #4	; (adr r2, 8001d84 <LCD_Gotoxy+0x1c>)
 8001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d84:	08001d95 	.word	0x08001d95
 8001d88:	08001d9b 	.word	0x08001d9b
 8001d8c:	08001da1 	.word	0x08001da1
 8001d90:	08001da7 	.word	0x08001da7
	case 0:
		conta_address = 0x80;
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	73fb      	strb	r3, [r7, #15]
		break;
 8001d98:	e009      	b.n	8001dae <LCD_Gotoxy+0x46>
	case 1:
		conta_address = 0xC0;
 8001d9a:	23c0      	movs	r3, #192	; 0xc0
 8001d9c:	73fb      	strb	r3, [r7, #15]
		break;
 8001d9e:	e006      	b.n	8001dae <LCD_Gotoxy+0x46>
	case 2:
		conta_address = 0x94;
 8001da0:	2394      	movs	r3, #148	; 0x94
 8001da2:	73fb      	strb	r3, [r7, #15]
		break;
 8001da4:	e003      	b.n	8001dae <LCD_Gotoxy+0x46>
	case 3:
		conta_address = 0xD4;
 8001da6:	23d4      	movs	r3, #212	; 0xd4
 8001da8:	73fb      	strb	r3, [r7, #15]
		break;
 8001daa:	e000      	b.n	8001dae <LCD_Gotoxy+0x46>
	default:
		break;
 8001dac:	bf00      	nop
	}

	conta_address = conta_address + x;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	4413      	add	r3, r2
 8001db4:	73fb      	strb	r3, [r7, #15]
	LCD_Command(LCD, conta_address);
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fea3 	bl	8001b06 <LCD_Command>

	return;
 8001dc0:	bf00      	nop
}
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <__libc_init_array>:
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	4d0d      	ldr	r5, [pc, #52]	; (8001e00 <__libc_init_array+0x38>)
 8001dcc:	4c0d      	ldr	r4, [pc, #52]	; (8001e04 <__libc_init_array+0x3c>)
 8001dce:	1b64      	subs	r4, r4, r5
 8001dd0:	10a4      	asrs	r4, r4, #2
 8001dd2:	2600      	movs	r6, #0
 8001dd4:	42a6      	cmp	r6, r4
 8001dd6:	d109      	bne.n	8001dec <__libc_init_array+0x24>
 8001dd8:	4d0b      	ldr	r5, [pc, #44]	; (8001e08 <__libc_init_array+0x40>)
 8001dda:	4c0c      	ldr	r4, [pc, #48]	; (8001e0c <__libc_init_array+0x44>)
 8001ddc:	f000 f820 	bl	8001e20 <_init>
 8001de0:	1b64      	subs	r4, r4, r5
 8001de2:	10a4      	asrs	r4, r4, #2
 8001de4:	2600      	movs	r6, #0
 8001de6:	42a6      	cmp	r6, r4
 8001de8:	d105      	bne.n	8001df6 <__libc_init_array+0x2e>
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
 8001dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001df0:	4798      	blx	r3
 8001df2:	3601      	adds	r6, #1
 8001df4:	e7ee      	b.n	8001dd4 <__libc_init_array+0xc>
 8001df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dfa:	4798      	blx	r3
 8001dfc:	3601      	adds	r6, #1
 8001dfe:	e7f2      	b.n	8001de6 <__libc_init_array+0x1e>
 8001e00:	08001e88 	.word	0x08001e88
 8001e04:	08001e88 	.word	0x08001e88
 8001e08:	08001e88 	.word	0x08001e88
 8001e0c:	08001e8c 	.word	0x08001e8c

08001e10 <memset>:
 8001e10:	4402      	add	r2, r0
 8001e12:	4603      	mov	r3, r0
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d100      	bne.n	8001e1a <memset+0xa>
 8001e18:	4770      	bx	lr
 8001e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e1e:	e7f9      	b.n	8001e14 <memset+0x4>

08001e20 <_init>:
 8001e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e22:	bf00      	nop
 8001e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e26:	bc08      	pop	{r3}
 8001e28:	469e      	mov	lr, r3
 8001e2a:	4770      	bx	lr

08001e2c <_fini>:
 8001e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2e:	bf00      	nop
 8001e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e32:	bc08      	pop	{r3}
 8001e34:	469e      	mov	lr, r3
 8001e36:	4770      	bx	lr
